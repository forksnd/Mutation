//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mutation.Halo.TagGroups.Tags
{
    using System;
    using System.IO;
    using Mutation.Halo;
    using Mutation.Halo.TagGroups;
    using Mutation.Halo.TagGroups.Attributes;
    using Mutation.Halo.TagGroups.FieldTypes;
    
    
    [TagGroupDefinitionAttribute(cacheFileSize: 76, tagFileSize: 76, version: 7, groupTag: "bitm", parentGroupTag: "", name: "bitmap", minimumVersion: EngineVersion.Halo2Xbox, maximumVersion: EngineVersion.Halo2Vista)]
    public class bitmap_block
    {
        
        // CacheOffset: 0, TagOffset: 0
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "Type", explanation: @"Type controls bitmap geometry. All dimensions must be a power of 2 except for SPRITES and INTERFACE BITMAPS:

* 2D TEXTURES: Ordinary 2D textures will be generated.
* 3D TEXTURES: Volume textures will be generated from each sequence of 2D texture slices.
* CUBE MAPS: Generated from each consecutive set of six 2D textures in each sequence, all faces of a cube map must be square and the same size.
* SPRITES: Sprite texture pages will be generated.
* INTERFACE BITMAPS: Similar to 2D TEXTURES but without mipmaps and without the power of 2 restriction.");
        
        // CacheOffset: 0, TagOffset: 0
        [EditorMarkUpAttribute(displayName: "Type")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_type type;
        
        // CacheOffset: 2, TagOffset: 2
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField1 = new Explanation(name: "Format", explanation: @"Format controls how pixels will be stored internally:

* COMPRESSED WITH COLOR-KEY TRANSPARENCY: DXT1 compression, using 4 bits/pixel. 4-x-4 blocks of pixels, are reduced to two colors and interpolated, alpha channel uses color-key transparency instead of alpha from the plate (all zero-alpha pixels also have zero-color).
* COMPRESSED WITH EXPLICIT ALPHA: DXT2/3 compression, using 8 bits/pixel. Same as DXT1 without the color key transparency, alpha channel uses alpha from plate quantized down to 4 bits/pixel.
* COMPRESSED WITH INTERPOLATED ALPHA: DXT4/5 compression, using 8 bits/pixel. Same as DXT2/3, except alpha is smoother. Better for smooth alpha gradients, but worse for noisy alpha.
* 16-BIT COLOR: Uses 16 bits/pixel. Depending on the alpha channel, bitmaps are quantized to either r5g6b5 (no alpha), a1r5g5b5 (1-bit alpha), or a4r4g4b4 (>1-bit alpha).
* 32-BIT COLOR: Uses 32 bits/pixel. Very high quality and can have alpha at no added cost. This format takes up the most memory, however. Bitmap formats are x8r8g8b8 and a8r8g8b.
* MONOCHROME: Uses either 8 or 16 bits/pixel. Bitmap formats are a8 (alpha), y8 (intensity), ay8 (combined alpha intensity), and a8y8 (separate alpha intensity).");
        
        // CacheOffset: 2, TagOffset: 2
        [EditorMarkUpAttribute(displayName: "Format")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_format format;
        
        // CacheOffset: 4, TagOffset: 4
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField2 = new Explanation(name: "Usage", explanation: @"Usage controls how mipmaps are generated:

* ALPHA BLEND: Pixels with zero alpha are ignored in mipmaps, to prevent bleeding the transparent color.
* DEFAULT: Downsampling works normally, as in Photoshop.
* HEIGHT MAP: The bitmap (normally grayscale) is a height map that gets converted to a bump map. Uses <bump height> below. Alpha is passed through unmodified.
* DETAIL MAP: Mipmap color fades to gray, controlled by <detail fade factor> below. Alpha fades to white.
* LIGHT MAP: Generates no mipmaps. Do not use!
* VECTOR MAP: Used mostly for special effects; pixels are treated as xyz vectors and normalized after downsampling. Alpha is passed through unmodified.");
        
        // CacheOffset: 4, TagOffset: 4
        [EditorMarkUpAttribute(displayName: "Usage")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_usage usage;
        
        // CacheOffset: 6, TagOffset: 6
        [EditorMarkUpAttribute(displayName: "Flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_flags flags;
        
        // CacheOffset: 8, TagOffset: 8
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField3 = new Explanation(name: "Postprocessing", explanation: "These properties control how mipmaps are postprocessed.");
        
        // CacheOffset: 8, TagOffset: 8
        [EditorMarkUpAttribute(displayName: "Detail Fade Factor", unitsSpecifier: "[0,1]", tooltipText: "0 means fade to gray by last mipmap; 1 means fade to gray by first mipmap.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float detail_fade_factor;
        
        // CacheOffset: 12, TagOffset: 12
        [EditorMarkUpAttribute(displayName: "Sharpen Amount", unitsSpecifier: "[0,1]", tooltipText: "Sharpens mipmap after downsampling.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float sharpen_amount;
        
        // CacheOffset: 16, TagOffset: 16
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "Bump Height", unitsSpecifier: "repeats", tooltipText: "tApparent height of the bump map above the triangle onto which it is textured, in" +
    " texture repeats (i.e., 1.0 would be as high as the texture is wide).")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float bump_height;
        
        // CacheOffset: 20, TagOffset: 20
        [EditorMarkUpAttribute(displayName: "Sprite Size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_sprite_size sprite_size;
        
        // CacheOffset: 22, TagOffset: 22
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short _noNameField1;
        
        // CacheOffset: 24, TagOffset: 24
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField4 = new Explanation(name: "Color Plate", explanation: "The original image file used to import the bitmap group.");
        
        // CacheOffset: 24, TagOffset: 24
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Color Plate Width", unitsSpecifier: "pixels")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short color_plate_width;
        
        // CacheOffset: 26, TagOffset: 26
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Color Plate Height", unitsSpecifier: "pixels")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short color_plate_height;
        
        // CacheOffset: 28, TagOffset: 28
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Compressed Color Plate Data")]
        [TagDataAttribute(maxSize: 1073741824, alignment: 4, maxSizeString: "MAXIMUM_BITMAP_PIXELS_SIZE")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagData compressed_color_plate_data;
        
        // CacheOffset: 36, TagOffset: 36
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField5 = new Explanation(name: "Processed Pixel Data", explanation: "Pixel data after being processed by the tool.");
        
        // CacheOffset: 36, TagOffset: 36
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Processed Pixel Data")]
        [TagDataAttribute(maxSize: 1073741824, alignment: 4, maxSizeString: "MAXIMUM_BITMAP_PIXELS_SIZE")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagData processed_pixel_data;
        
        // CacheOffset: 44, TagOffset: 44
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField6 = new Explanation(name: "Miscellaneous");
        
        // CacheOffset: 44, TagOffset: 44
        [EditorMarkUpAttribute(displayName: "Blur Filter Size", unitsSpecifier: "[0,10] pixels", tooltipText: "Blurs the bitmap before generating mipmaps.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float blur_filter_size;
        
        // CacheOffset: 48, TagOffset: 48
        [EditorMarkUpAttribute(displayName: "Alpha Bias", unitsSpecifier: "[-1,1]", tooltipText: "Affects alpha mipmap generation.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float alpha_bias;
        
        // CacheOffset: 52, TagOffset: 52
        [EditorMarkUpAttribute(displayName: "Mipmap Count", unitsSpecifier: "levels", tooltipText: "0 Defaults to all levels.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short mipmap_count;
        
        // CacheOffset: 54, TagOffset: 54
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField7 = new Explanation(name: "...More Sprite Processing", explanation: "Sprite usage controls the background color of sprite plates.");
        
        // CacheOffset: 54, TagOffset: 54
        [EditorMarkUpAttribute(displayName: "Sprite Usage")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_sprite_usage sprite_usage;
        
        // CacheOffset: 56, TagOffset: 56
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Sprite Spacing")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short sprite_spacing;
        
        // CacheOffset: 58, TagOffset: 58
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField8 = new Explanation(name: "...More Stuff");
        
        // CacheOffset: 58, TagOffset: 58
        [EditorMarkUpAttribute(displayName: "Force Format")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_force_format force_format;
        
        // CacheOffset: 60, TagOffset: 60
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Sequences")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<bitmap_group_sequence_block> sequences;
        
        // CacheOffset: 68, TagOffset: 68
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Bitmaps")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<bitmap_data_block> bitmaps;
        
        // CacheOffset: 76, TagOffset: 76
        [EngineVersionAttribute(min: EngineVersion.Halo2Vista, max: EngineVersion.Maximum)]
        public Explanation _explanationField9 = new Explanation(name: "WDP fields");
        
        // CacheOffset: 76, TagOffset: 76
        [EditorMarkUpAttribute(displayName: "color compression quality", unitsSpecifier: "[1,127]", tooltipText: "1 means lossless, 127 means crappy")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Vista, max: EngineVersion.Maximum)]
        public byte color_compression_quality;
        
        // CacheOffset: 76, TagOffset: 76
        [EditorMarkUpAttribute(displayName: "alpha compression quality", unitsSpecifier: "[1,127]", tooltipText: "1 means lossless, 127 means crappy")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Vista, max: EngineVersion.Maximum)]
        public byte alpha_compression_quality;
        
        // CacheOffset: 76, TagOffset: 76
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "overlap")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Vista, max: EngineVersion.Maximum)]
        public byte overlap;
        
        // CacheOffset: 76, TagOffset: 76
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "color subsampling")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Vista, max: EngineVersion.Maximum)]
        public e_color_subsampling color_subsampling;
        
        public enum e_type : short
        {
            
            [EditorMarkUpAttribute(displayName: "2D Textures")]
            _2d_textures = 0x0,
            
            [EditorMarkUpAttribute(displayName: "3D Textures")]
            _3d_textures = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Cube Maps")]
            cube_maps = 0x2,
            
            [EditorMarkUpAttribute(displayName: "Sprites")]
            sprites = 0x3,
            
            [EditorMarkUpAttribute(displayName: "Interface Bitmaps")]
            interface_bitmaps = 0x4,
        }
        
        public enum e_format : short
        {
            
            [EditorMarkUpAttribute(displayName: "Compressed with Color-Key Transparency")]
            compressed_with_color_key_transparency = 0x0,
            
            [EditorMarkUpAttribute(displayName: "Compressed with Explicit Alpha")]
            compressed_with_explicit_alpha = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Compressed with Interpolated Alpha")]
            compressed_with_interpolated_alpha = 0x2,
            
            [EditorMarkUpAttribute(displayName: "16-Bit Color")]
            _16_bit_color = 0x3,
            
            [EditorMarkUpAttribute(displayName: "32-Bit Color")]
            _32_bit_color = 0x4,
            
            [EditorMarkUpAttribute(displayName: "Monochrome")]
            monochrome = 0x5,
        }
        
        public enum e_usage : short
        {
            
            [EditorMarkUpAttribute(displayName: "Alpha Blend")]
            alpha_blend = 0x0,
            
            [EditorMarkUpAttribute(displayName: "Default")]
            @default = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Height Map")]
            height_map = 0x2,
            
            [EditorMarkUpAttribute(displayName: "Detail Map")]
            detail_map = 0x3,
            
            [EditorMarkUpAttribute(displayName: "Light Map")]
            light_map = 0x4,
            
            [EditorMarkUpAttribute(displayName: "Vector Map")]
            vector_map = 0x5,
            
            [EditorMarkUpAttribute(displayName: "Height Map BLUE 255")]
            height_map_blue_255 = 0x6,
            
            [EditorMarkUpAttribute(displayName: "embm")]
            embm = 0x7,
            
            [EditorMarkUpAttribute(displayName: "Height Map A8L8")]
            height_map_a8l8 = 0x8,
            
            [EditorMarkUpAttribute(displayName: "Height Map G8B8")]
            height_map_g8b8 = 0x9,
            
            [EditorMarkUpAttribute(displayName: "Height Map G8B8 w/ Alpha")]
            height_map_g8b8_w__alpha = 0xa,
        }
        
        [FlagsAttribute()]
        public enum b_flags : short
        {
            
            [EditorMarkUpAttribute(displayName: "Enable Diffusion Dithering")]
            enable_diffusion_dithering = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Disable Height Map Compression")]
            disable_height_map_compression = 0x2,
            
            [EditorMarkUpAttribute(displayName: "Uniform Sprite Sequences")]
            uniform_sprite_sequences = 0x4,
            
            [EditorMarkUpAttribute(displayName: "Filthy Sprite Bug Fix")]
            filthy_sprite_bug_fix = 0x8,
            
            [EditorMarkUpAttribute(displayName: "Use Sharp Bump Filter")]
            use_sharp_bump_filter = 0x10,
            
            [EditorMarkUpAttribute(displayName: "UNUSED")]
            unused = 0x20,
            
            [EditorMarkUpAttribute(displayName: "Use Clamped/Mirrored Bump Filter")]
            use_clamped_mirrored_bump_filter = 0x40,
            
            [EditorMarkUpAttribute(displayName: "Invert Detail Fade")]
            invert_detail_fade = 0x80,
            
            [EditorMarkUpAttribute(displayName: "Swap x-y Vector Components")]
            swap_x_y_vector_components = 0x100,
            
            [EditorMarkUpAttribute(displayName: "Convert from Signed")]
            convert_from_signed = 0x200,
            
            [EditorMarkUpAttribute(displayName: "Convert to Signed")]
            convert_to_signed = 0x400,
            
            [EditorMarkUpAttribute(displayName: "Import mipmap Chains")]
            import_mipmap_chains = 0x800,
            
            [EditorMarkUpAttribute(displayName: "Intentionally True Color")]
            intentionally_true_color = 0x1000,
        }
        
        public enum e_sprite_size : short
        {
            
            [EditorMarkUpAttribute(displayName: "32 x 32")]
            _32_x_32 = 0x0,
            
            [EditorMarkUpAttribute(displayName: "64 x 64")]
            _64_x_64 = 0x1,
            
            [EditorMarkUpAttribute(displayName: "128 x 128")]
            _128_x_128 = 0x2,
            
            [EditorMarkUpAttribute(displayName: "256 x 256")]
            _256_x_256 = 0x3,
            
            [EditorMarkUpAttribute(displayName: "512 x 512")]
            _512_x_512 = 0x4,
            
            [EditorMarkUpAttribute(displayName: "1024 x 1024")]
            _1024_x_1024 = 0x5,
        }
        
        public enum e_sprite_usage : short
        {
            
            [EditorMarkUpAttribute(displayName: "Blend/Add/Subtract/Max")]
            blend_add_subtract_max = 0x0,
            
            [EditorMarkUpAttribute(displayName: "Multiply/Min")]
            multiply_min = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Double Multiply")]
            double_multiply = 0x2,
        }
        
        public enum e_force_format : short
        {
            
            [EditorMarkUpAttribute(displayName: "Default")]
            @default = 0x0,
            
            [EditorMarkUpAttribute(displayName: "Force G8B8")]
            force_g8b8 = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Force DXT1")]
            force_dxt1 = 0x2,
            
            [EditorMarkUpAttribute(displayName: "Force DXT3")]
            force_dxt3 = 0x3,
            
            [EditorMarkUpAttribute(displayName: "Force DXT5")]
            force_dxt5 = 0x4,
            
            [EditorMarkUpAttribute(displayName: "Force ALPHA-LUMINANCE8")]
            force_alpha_luminance8 = 0x5,
            
            [EditorMarkUpAttribute(displayName: "Force A4R4G4B4")]
            force_a4r4g4b4 = 0x6,
        }
        
        public enum e_color_subsampling : byte
        {
            
            [EditorMarkUpAttribute(displayName: "4", unitsSpecifier: "0")]
            _4 = 0x0,
            
            [EditorMarkUpAttribute(displayName: "4", unitsSpecifier: "0")]
            _41 = 0x1,
            
            [EditorMarkUpAttribute(displayName: "4", unitsSpecifier: "2")]
            _42 = 0x2,
            
            [EditorMarkUpAttribute(displayName: "4", unitsSpecifier: "4")]
            _43 = 0x3,
        }
    }
    
    #region bitmap_group_sequence_block
    [TagBlockDefinitionAttribute(cacheFileSize: 60, tagFileSize: 60, alignment: 4, maxBlockCount: 256)]
    public class bitmap_group_sequence_block
    {
        
        // CacheOffset: 0, TagOffset: 0
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.BlockName, displayName: "Name")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public String32 name;
        
        // CacheOffset: 32, TagOffset: 32
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "First Bitmap Index")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short first_bitmap_index;
        
        // CacheOffset: 34, TagOffset: 34
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Bitmap Count")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short bitmap_count;
        
        // CacheOffset: 36, TagOffset: 36
        [PaddingAttribute(PaddingType.Padding, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        // CacheOffset: 52, TagOffset: 52
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Sprites")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<bitmap_group_sprite_block> sprites;
    }
    #endregion
    
    #region bitmap_group_sprite_block
    [TagBlockDefinitionAttribute(cacheFileSize: 32, tagFileSize: 32, alignment: 4, maxBlockCount: 64)]
    public class bitmap_group_sprite_block
    {
        
        // CacheOffset: 0, TagOffset: 0
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Bitmap Index")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short bitmap_index;
        
        // CacheOffset: 2, TagOffset: 2
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        // CacheOffset: 4, TagOffset: 4
        [PaddingAttribute(PaddingType.Padding, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        // CacheOffset: 8, TagOffset: 8
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Left")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float left;
        
        // CacheOffset: 12, TagOffset: 12
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Right")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float right;
        
        // CacheOffset: 16, TagOffset: 16
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Top")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float top;
        
        // CacheOffset: 20, TagOffset: 20
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Bottom")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float bottom;
        
        // CacheOffset: 24, TagOffset: 24
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Registration Point")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealPoint2d registration_point;
    }
    #endregion
    
    #region bitmap_data_block
    [TagBlockDefinitionAttribute(cacheFileSize: 80, tagFileSize: 80, alignment: 4, maxBlockCount: 65536)]
    public class bitmap_data_block
    {
        
        // CacheOffset: 0, TagOffset: 0
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Signature")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public GroupTag signature;
        
        // CacheOffset: 4, TagOffset: 4
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Width", unitsSpecifier: "pixels")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short width;
        
        // CacheOffset: 6, TagOffset: 6
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Height", unitsSpecifier: "pixels")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short height;
        
        // CacheOffset: 8, TagOffset: 8
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Depth", unitsSpecifier: "pixels", tooltipText: "Depth is 1 for 2D textures and cube maps.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte depth;
        
        // CacheOffset: 9, TagOffset: 9
        [EditorMarkUpAttribute(displayName: "More Flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_more_flags more_flags;
        
        // CacheOffset: 10, TagOffset: 10
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Type", tooltipText: "Determines bitmap \"geometry.\"")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_type type;
        
        // CacheOffset: 12, TagOffset: 12
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Format", tooltipText: "Determines how pixels are represented internally.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_format format;
        
        // CacheOffset: 14, TagOffset: 14
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_flags flags;
        
        // CacheOffset: 16, TagOffset: 16
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Registration Point")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Point2d registration_point;
        
        // CacheOffset: 20, TagOffset: 20
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "mipmap Count")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short mipmap_count;
        
        // CacheOffset: 22, TagOffset: 22
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Low-Detail mipmap Count")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short low_detail_mipmap_count;
        
        // CacheOffset: 24, TagOffset: 24
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Pixels Offset")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int pixels_offset;
        
        // CacheOffset: 28, TagOffset: 28
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 1 Texture Data Offset")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_1_texture_data_offset;
        
        // CacheOffset: 32, TagOffset: 32
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 2 Texture Data Offset")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_2_texture_data_offset;
        
        // CacheOffset: 36, TagOffset: 36
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 3 Texture Data Offset")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_3_texture_data_offset;
        
        // CacheOffset: 40, TagOffset: 40
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 4 Texture Data Offset")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_4_texture_data_offset;
        
        // CacheOffset: 44, TagOffset: 44
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 5 Texture Data Offset")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_5_texture_data_offset;
        
        // CacheOffset: 48, TagOffset: 48
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 6 Texture Data Offset")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_6_texture_data_offset;
        
        // CacheOffset: 52, TagOffset: 52
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 1 Texture Data Size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_1_texture_data_size;
        
        // CacheOffset: 56, TagOffset: 56
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 2 Texture Data Size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_2_texture_data_size;
        
        // CacheOffset: 60, TagOffset: 60
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 3 Texture Data Size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_3_texture_data_size;
        
        // CacheOffset: 64, TagOffset: 64
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 4 Texture Data Size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_4_texture_data_size;
        
        // CacheOffset: 68, TagOffset: 68
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 5 Texture Data Size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_5_texture_data_size;
        
        // CacheOffset: 72, TagOffset: 72
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "LOD 6 Texture Data Size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public int lod_6_texture_data_size;
        
        // CacheOffset: 76, TagOffset: 76
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "Owner")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public datum_index owner;
        
        // CacheOffset: 80, TagOffset: 80
        [PaddingAttribute(PaddingType.Skip, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        // CacheOffset: 80, TagOffset: 80
        [PaddingAttribute(PaddingType.Skip, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        // CacheOffset: 80, TagOffset: 80
        [PaddingAttribute(PaddingType.Skip, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        // CacheOffset: 80, TagOffset: 80
        [PaddingAttribute(PaddingType.Skip, 20)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        // CacheOffset: 80, TagOffset: 80
        [PaddingAttribute(PaddingType.Skip, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [FlagsAttribute()]
        public enum b_more_flags : byte
        {
            
            [EditorMarkUpAttribute(displayName: "Delete from Cache File")]
            delete_from_cache_file = 0x1,
            
            [EditorMarkUpAttribute(displayName: "bitmap create attempted")]
            bitmap_create_attempted = 0x2,
        }
        
        public enum e_type : short
        {
            
            [EditorMarkUpAttribute(displayName: "2D Texture")]
            _2d_texture = 0x0,
            
            [EditorMarkUpAttribute(displayName: "3D Texture")]
            _3d_texture = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Cube Map")]
            cube_map = 0x2,
        }
        
        public enum e_format : short
        {
            
            [EditorMarkUpAttribute(displayName: "a8")]
            a8 = 0x0,
            
            [EditorMarkUpAttribute(displayName: "y8")]
            y8 = 0x1,
            
            [EditorMarkUpAttribute(displayName: "ay8")]
            ay8 = 0x2,
            
            [EditorMarkUpAttribute(displayName: "a8y8")]
            a8y8 = 0x3,
            
            [EditorMarkUpAttribute(displayName: "unused1")]
            unused1 = 0x4,
            
            [EditorMarkUpAttribute(displayName: "unused2")]
            unused2 = 0x5,
            
            [EditorMarkUpAttribute(displayName: "r5g6b5")]
            r5g6b5 = 0x6,
            
            [EditorMarkUpAttribute(displayName: "unused3")]
            unused3 = 0x7,
            
            [EditorMarkUpAttribute(displayName: "a1r5g5b5")]
            a1r5g5b5 = 0x8,
            
            [EditorMarkUpAttribute(displayName: "a4r4g4b4")]
            a4r4g4b4 = 0x9,
            
            [EditorMarkUpAttribute(displayName: "x8r8g8b8")]
            x8r8g8b8 = 0xa,
            
            [EditorMarkUpAttribute(displayName: "a8r8g8b8")]
            a8r8g8b8 = 0xb,
            
            [EditorMarkUpAttribute(displayName: "unused4")]
            unused4 = 0xc,
            
            [EditorMarkUpAttribute(displayName: "unused5")]
            unused5 = 0xd,
            
            [EditorMarkUpAttribute(displayName: "dxt1")]
            dxt1 = 0xe,
            
            [EditorMarkUpAttribute(displayName: "dxt3")]
            dxt3 = 0xf,
            
            [EditorMarkUpAttribute(displayName: "dxt5")]
            dxt5 = 0x10,
            
            [EditorMarkUpAttribute(displayName: "p8-bump")]
            p8_bump = 0x11,
            
            [EditorMarkUpAttribute(displayName: "p8")]
            p8 = 0x12,
            
            [EditorMarkUpAttribute(displayName: "argbfp32")]
            argbfp32 = 0x13,
            
            [EditorMarkUpAttribute(displayName: "rgbfp32")]
            rgbfp32 = 0x14,
            
            [EditorMarkUpAttribute(displayName: "rgbfp16")]
            rgbfp16 = 0x15,
            
            [EditorMarkUpAttribute(displayName: "v8u8")]
            v8u8 = 0x16,
            
            [EditorMarkUpAttribute(displayName: "g8b8")]
            g8b8 = 0x17,
        }
        
        [FlagsAttribute()]
        public enum b_flags : short
        {
            
            [EditorMarkUpAttribute(displayName: "Power of Two Dimensions")]
            power_of_two_dimensions = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Compressed")]
            compressed = 0x2,
            
            [EditorMarkUpAttribute(displayName: "Palettized")]
            palettized = 0x4,
            
            [EditorMarkUpAttribute(displayName: "Swizzled")]
            swizzled = 0x8,
            
            [EditorMarkUpAttribute(displayName: "Linear")]
            linear = 0x10,
            
            [EditorMarkUpAttribute(displayName: "v16u16")]
            v16u16 = 0x20,
            
            [EditorMarkUpAttribute(displayName: "MIP Map Debug Level")]
            mip_map_debug_level = 0x40,
            
            [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "Prefer Stutter (Prefer Low Detail")]
            prefer_stutter__prefer_low_detail = 0x80,
        }
    }
    #endregion
}
