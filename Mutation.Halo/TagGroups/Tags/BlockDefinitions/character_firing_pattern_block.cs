//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mutation.Halo.TagGroups.Tags
{
    using System;
    using System.IO;
    using Mutation.Halo;
    using Mutation.Halo.TagGroups;
    using Mutation.Halo.TagGroups.Attributes;
    using Mutation.Halo.TagGroups.FieldTypes;
    
    
    #region character_firing_pattern_block
    [TagBlockDefinitionAttribute(cacheFileSize: 64, tagFileSize: 64, alignment: 4, maxBlockCount: 2)]
    public class character_firing_pattern_block
    {
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "rate of fire", tooltipText: "how many times per second we pull the trigger (zero = continuously held down)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float rate_of_fire;
        
        [EditorMarkUpAttribute(displayName: "target tracking", unitsSpecifier: "[0,1]", tooltipText: "how well our bursts track moving targets. 0.0= fire at the position they were sta" +
    "nding when we started the burst. 1.0= fire at current position")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float target_tracking;
        
        [EditorMarkUpAttribute(displayName: "target leading", unitsSpecifier: "[0,1]", tooltipText: "how much we lead moving targets. 0.0= no prediction. 1.0= predict completely.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float target_leading;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "burst geometry", explanation: @"at the start of every burst we pick a random point near the target to fire at, on either the left or the right side.
the burst origin angle controls whether this error is exactly horizontal or might have some vertical component.

over the course of the burst we move our projectiles back in the opposite direction towards the target. this return motion is also controlled by an angle that specifies how close to the horizontal it is.

for example if the burst origin angle and the burst return angle were both zero, and the return length was the same as the burst length, every burst would start the same amount away from the target (on either the left or right) and move back to exactly over the target at the end of the burst.");
        
        [EditorMarkUpAttribute(displayName: "burst origin radius", unitsSpecifier: "world units", tooltipText: "how far away from the target the starting point is")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float burst_origin_radius;
        
        [EditorMarkUpAttribute(displayName: "burst origin angle", unitsSpecifier: "degrees", tooltipText: "the range from the horizontal that our starting error can be")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float burst_origin_angle;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "burst return length", unitsSpecifier: "world units", tooltipText: "how far the burst point moves back towards the target (could be negative)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds burst_return_length;
        
        [EditorMarkUpAttribute(displayName: "burst return angle", unitsSpecifier: "degrees", tooltipText: "the range from the horizontal that the return direction can be")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float burst_return_angle;
        
        [EditorMarkUpAttribute(displayName: "burst duration", unitsSpecifier: "seconds", tooltipText: "how long each burst we fire is")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds burst_duration;
        
        [EditorMarkUpAttribute(displayName: "burst separation", unitsSpecifier: "seconds", tooltipText: "how long we wait between bursts")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds burst_separation;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "weapon damage modifier", tooltipText: "what fraction of its normal damage our weapon inflicts (zero = no modifier)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float weapon_damage_modifier;
        
        [EditorMarkUpAttribute(displayName: "projectile error", unitsSpecifier: "degrees", tooltipText: "error added to every projectile we fire")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float projectile_error;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "burst angular velocity", unitsSpecifier: "degrees per second", tooltipText: "the maximum rate at which we can sweep our fire (zero = unlimited)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float burst_angular_velocity;
        
        [EditorMarkUpAttribute(displayName: "maximum error angle", unitsSpecifier: "degrees", tooltipText: "cap on the maximum angle by which we will miss target (restriction on burst origi" +
    "n radius")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float maximum_error_angle;
    }
    #endregion
}
