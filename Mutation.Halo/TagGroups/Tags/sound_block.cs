//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mutation.Halo.TagGroups.Tags
{
    using System;
    using System.IO;
    using Mutation.Halo;
    using Mutation.Halo.TagGroups;
    using Mutation.Halo.TagGroups.Attributes;
    using Mutation.Halo.TagGroups.FieldTypes;
    
    
    [TagGroupDefinitionAttribute(cacheFileSize: 152, tagFileSize: 164, version: 4, groupTag: "snd!", parentGroupTag: "", name: "sound", minimumVersion: EngineVersion.Halo2Xbox, maximumVersion: EngineVersion.Halo2Vista)]
    public class sound_block
    {
        
        [EditorMarkUpAttribute(displayName: "flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_flags flags;
        
        [EditorMarkUpAttribute(displayName: "class")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_class @class;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "sample rate")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_sample_rate sample_rate;
        
        [EditorMarkUpAttribute(displayName: "minimum distance", unitsSpecifier: "world units", tooltipText: "the distance below which this sound no longer gets louder")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float minimum_distance;
        
        [EditorMarkUpAttribute(displayName: "maximum distance", unitsSpecifier: "world units", tooltipText: "the distance beyond which this sound is no longer audible")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float maximum_distance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "skip fraction", tooltipText: "fraction of requests to play this sound that will be ignored (0 means always play" +
    ".)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float skip_fraction;
        
        [EditorMarkUpAttribute(displayName: "random pitch bounds", unitsSpecifier: "cents", tooltipText: "the sound\'s pitch will be modulated randomly within this range.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds random_pitch_bounds;
        
        [EditorMarkUpAttribute(displayName: "inner cone angle", unitsSpecifier: "degrees", tooltipText: "within the cone defined by this angle and the sound\'s direction, the sound plays " +
    "with a gain of 1.0.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float inner_cone_angle;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "outer cone angle", unitsSpecifier: "degrees", tooltipText: "outside the cone defined by this angle and the sound\'s direction, the sound plays" +
    " with a gain of OUTER CONE GAIN. (0 means the sound does not attenuate with dire" +
    "ction.)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float outer_cone_angle;
        
        [EditorMarkUpAttribute(displayName: "outer cone gain", unitsSpecifier: "dB", tooltipText: "the gain to use when the sound is directed away from the listener")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float outer_cone_gain;
        
        [EditorMarkUpAttribute(displayName: "gain modifier", unitsSpecifier: "dB")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float gain_modifier;
        
        [EditorMarkUpAttribute(displayName: "maximum bend per second", unitsSpecifier: "cents")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float maximum_bend_per_second;
        
        [EditorMarkUpAttribute(displayName: "output effect")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_output_effect output_effect;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "import type")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_import_type import_type;
        
        [PaddingAttribute(PaddingType.Padding, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "skip fraction modifier")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float skip_fraction_modifier;
        
        [EditorMarkUpAttribute(displayName: "gain modifier", unitsSpecifier: "dB")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float gain_modifier1;
        
        [EditorMarkUpAttribute(displayName: "pitch modifier", unitsSpecifier: "cents")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float pitch_modifier;
        
        [PaddingAttribute(PaddingType.Padding, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "skip fraction modifier")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float skip_fraction_modifier1;
        
        [EditorMarkUpAttribute(displayName: "gain modifier", unitsSpecifier: "dB")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float gain_modifier2;
        
        [EditorMarkUpAttribute(displayName: "pitch modifier", unitsSpecifier: "cents")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float pitch_modifier1;
        
        [PaddingAttribute(PaddingType.Padding, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "encoding")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_encoding encoding;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "compression")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_compression compression;
        
        [EditorMarkUpAttribute(displayName: "promotion sound")]
        [TagReferenceAttribute("snd!")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference promotion_sound;
        
        [EditorMarkUpAttribute(displayName: "promotion count", tooltipText: "when there are this many instances of the sound, promote to the new sound.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short promotion_count;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [PaddingAttribute(PaddingType.Padding, 20)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [EditorMarkUpAttribute(displayName: "pitch ranges", tooltipText: "pitch ranges allow multiple samples to represent the same sound at different pitc" +
    "hes")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<old_sound_pitch_range_block> pitch_ranges;
        
        [FlagsAttribute()]
        public enum b_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "fit to adpcm blocksize")]
            fit_to_adpcm_blocksize = 0x1,
            
            [EditorMarkUpAttribute(displayName: "split long sound into permutations")]
            split_long_sound_into_permutations = 0x2,
            
            [EditorMarkUpAttribute(displayName: "always spatialize", tooltipText: "always play as 3d sound, even in first person")]
            always_spatialize = 0x4,
            
            [EditorMarkUpAttribute(displayName: "never obstruct", tooltipText: "disable occlusion/obstruction for this sound")]
            never_obstruct = 0x8,
            
            [EditorMarkUpAttribute(displayName: "internal don\'t touch")]
            internal_don_t_touch = 0x10,
            
            [EditorMarkUpAttribute(displayName: "use huge sound transmission")]
            use_huge_sound_transmission = 0x20,
            
            [EditorMarkUpAttribute(displayName: "link count to owner unit")]
            link_count_to_owner_unit = 0x40,
            
            [EditorMarkUpAttribute(displayName: "pitch range is language")]
            pitch_range_is_language = 0x80,
            
            [EditorMarkUpAttribute(displayName: "don\'t use sound class speaker flag")]
            don_t_use_sound_class_speaker_flag = 0x100,
            
            [EditorMarkUpAttribute(displayName: "don\'t use lipsync data")]
            don_t_use_lipsync_data = 0x200,
        }
        
        public enum e_class : short
        {
            
            [EditorMarkUpAttribute(displayName: "projectile_impact")]
            projectile_impact = 0x0,
            
            [EditorMarkUpAttribute(displayName: "projectile_detonation")]
            projectile_detonation = 0x1,
            
            [EditorMarkUpAttribute(displayName: "projectile_flyby")]
            projectile_flyby = 0x2,
            
            [EditorMarkUpAttribute(displayName: "weapon_fire")]
            weapon_fire = 0x4,
            
            [EditorMarkUpAttribute(displayName: "weapon_ready")]
            weapon_ready = 0x5,
            
            [EditorMarkUpAttribute(displayName: "weapon_reload")]
            weapon_reload = 0x6,
            
            [EditorMarkUpAttribute(displayName: "weapon_empty")]
            weapon_empty = 0x7,
            
            [EditorMarkUpAttribute(displayName: "weapon_charge")]
            weapon_charge = 0x8,
            
            [EditorMarkUpAttribute(displayName: "weapon_overheat")]
            weapon_overheat = 0x9,
            
            [EditorMarkUpAttribute(displayName: "weapon_idle")]
            weapon_idle = 0xa,
            
            [EditorMarkUpAttribute(displayName: "weapon_melee")]
            weapon_melee = 0xb,
            
            [EditorMarkUpAttribute(displayName: "weapon_animation")]
            weapon_animation = 0xc,
            
            [EditorMarkUpAttribute(displayName: "object_impacts")]
            object_impacts = 0xd,
            
            [EditorMarkUpAttribute(displayName: "particle_impacts")]
            particle_impacts = 0xe,
            
            [EditorMarkUpAttribute(displayName: "unit_footsteps")]
            unit_footsteps = 0x12,
            
            [EditorMarkUpAttribute(displayName: "unit_dialog")]
            unit_dialog = 0x13,
            
            [EditorMarkUpAttribute(displayName: "unit_animation")]
            unit_animation = 0x14,
            
            [EditorMarkUpAttribute(displayName: "vehicle_collision")]
            vehicle_collision = 0x16,
            
            [EditorMarkUpAttribute(displayName: "vehicle_engine")]
            vehicle_engine = 0x17,
            
            [EditorMarkUpAttribute(displayName: "vehicle_animation")]
            vehicle_animation = 0x18,
            
            [EditorMarkUpAttribute(displayName: "device_door")]
            device_door = 0x1a,
            
            [EditorMarkUpAttribute(displayName: "device_machinery")]
            device_machinery = 0x1c,
            
            [EditorMarkUpAttribute(displayName: "device_stationary")]
            device_stationary = 0x1d,
            
            [EditorMarkUpAttribute(displayName: "music")]
            music = 0x20,
            
            [EditorMarkUpAttribute(displayName: "ambient_nature")]
            ambient_nature = 0x21,
            
            [EditorMarkUpAttribute(displayName: "ambient_machinery")]
            ambient_machinery = 0x22,
            
            [EditorMarkUpAttribute(displayName: "huge_ass")]
            huge_ass = 0x24,
            
            [EditorMarkUpAttribute(displayName: "object_looping")]
            object_looping = 0x25,
            
            [EditorMarkUpAttribute(displayName: "cinematic_music")]
            cinematic_music = 0x26,
            
            [EditorMarkUpAttribute(displayName: "cortana_mission")]
            cortana_mission = 0x2d,
            
            [EditorMarkUpAttribute(displayName: "cortana_cinematic")]
            cortana_cinematic = 0x2e,
            
            [EditorMarkUpAttribute(displayName: "mission_dialog")]
            mission_dialog = 0x2f,
            
            [EditorMarkUpAttribute(displayName: "cinematic_dialog")]
            cinematic_dialog = 0x30,
            
            [EditorMarkUpAttribute(displayName: "scripted_cinematic_foley")]
            scripted_cinematic_foley = 0x31,
            
            [EditorMarkUpAttribute(displayName: "game_event")]
            game_event = 0x32,
            
            [EditorMarkUpAttribute(displayName: "ui")]
            ui = 0x33,
            
            [EditorMarkUpAttribute(displayName: "test")]
            test = 0x34,
            
            [EditorMarkUpAttribute(displayName: "multilingual_test")]
            multilingual_test = 0x35,
        }
        
        public enum e_sample_rate : short
        {
            
            [EditorMarkUpAttribute(displayName: "22kHz")]
            _22khz = 0x0,
            
            [EditorMarkUpAttribute(displayName: "44kHz")]
            _44khz = 0x1,
            
            [EditorMarkUpAttribute(displayName: "32kHz")]
            _32khz = 0x2,
        }
        
        public enum e_output_effect : short
        {
            
            [EditorMarkUpAttribute(displayName: "none")]
            none = 0x0,
            
            [EditorMarkUpAttribute(displayName: "output front speakers")]
            output_front_speakers = 0x1,
            
            [EditorMarkUpAttribute(displayName: "output rear speakers")]
            output_rear_speakers = 0x2,
            
            [EditorMarkUpAttribute(displayName: "output center speakers")]
            output_center_speakers = 0x3,
        }
        
        public enum e_import_type : short
        {
            
            [EditorMarkUpAttribute(displayName: "unknown")]
            unknown = 0x0,
            
            [EditorMarkUpAttribute(displayName: "single-shot")]
            single_shot = 0x1,
            
            [EditorMarkUpAttribute(displayName: "single-layer")]
            single_layer = 0x2,
            
            [EditorMarkUpAttribute(displayName: "multi-layer")]
            multi_layer = 0x3,
        }
        
        public enum e_encoding : short
        {
            
            [EditorMarkUpAttribute(displayName: "mono")]
            mono = 0x0,
            
            [EditorMarkUpAttribute(displayName: "stereo")]
            stereo = 0x1,
            
            [EditorMarkUpAttribute(displayName: "codec")]
            codec = 0x2,
        }
        
        public enum e_compression : short
        {
            
            [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "none (big endian")]
            none__big_endian = 0x0,
            
            [EditorMarkUpAttribute(displayName: "xbox adpcm")]
            xbox_adpcm = 0x1,
            
            [EditorMarkUpAttribute(displayName: "ima adpcm")]
            ima_adpcm = 0x2,
            
            [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "none (little endian")]
            none__little_endian = 0x3,
            
            [EditorMarkUpAttribute(displayName: "wma")]
            wma = 0x4,
        }
    }
    
    #region old_sound_pitch_range_block
    [TagBlockDefinitionAttribute(cacheFileSize: 76, tagFileSize: 76, alignment: 4, maxBlockCount: 9)]
    public class old_sound_pitch_range_block
    {
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "name", tooltipText: "the name of the imported pitch range directory")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public String32 name;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "pitch control", explanation: "these settings control what pitches this set of samples represents. if there is o" +
    "nly one pitch range, all three values are ignored.");
        
        [EditorMarkUpAttribute(displayName: "natural pitch", unitsSpecifier: "cents", tooltipText: "the apparent pitch when these samples are played at their recorded pitch.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float natural_pitch;
        
        [EditorMarkUpAttribute(displayName: "bend bounds", unitsSpecifier: "cents", tooltipText: "the range of pitches that will be represented using this sample. this should alwa" +
    "ys contain the natural pitch.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds bend_bounds;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "actual permutation count")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short actual_permutation_count;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [PaddingAttribute(PaddingType.Padding, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "permutations", tooltipText: "permutations represent equivalent variations of this sound.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<old_sound_permutations_block> permutations;
        
        [EditorMarkUpAttribute(displayName: "permutation info")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<old_sound_permutation_info_block> permutation_info;
    }
    #endregion
    
    #region old_sound_permutations_block
    [TagBlockDefinitionAttribute(cacheFileSize: 88, tagFileSize: 88, alignment: 4, maxBlockCount: 1024)]
    public class old_sound_permutations_block
    {
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly | EditorMarkUpFlags.BlockName, displayName: "name", tooltipText: "name of the file from which this sample was imported")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public String32 name;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "skip fraction", tooltipText: "fraction of requests to play this permutation that are ignored (a different permu" +
    "tation is selected.)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float skip_fraction;
        
        [EditorMarkUpAttribute(displayName: "gain", unitsSpecifier: "dB", tooltipText: "fraction of recorded volume to play at.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float gain;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "compression")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_compression compression;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "next permutation index")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short next_permutation_index;
        
        [PaddingAttribute(PaddingType.Padding, 20)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "samples", tooltipText: "sampled sound data")]
        [TagDataAttribute(maxSize: 16777216, alignment: 4, maxSizeString: "MAXIMUM_SOUND_DATA_SIZE")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagData samples;
        
        [EditorMarkUpAttribute(displayName: "mouth data")]
        [TagDataAttribute(maxSize: 8192, alignment: 4, maxSizeString: "MAXIMUM_SOUND_MOUTH_DATA_SIZE")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagData mouth_data;
        
        [EditorMarkUpAttribute(displayName: "subtitle data")]
        [TagDataAttribute(maxSize: 512, alignment: 4, maxSizeString: "MAXIMUM_SOUND_SUBTITLE_DATA_SIZE")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagData subtitle_data;
        
        public enum e_compression : short
        {
            
            [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "none (big endian")]
            none__big_endian = 0x0,
            
            [EditorMarkUpAttribute(displayName: "xbox adpcm")]
            xbox_adpcm = 0x1,
            
            [EditorMarkUpAttribute(displayName: "ima adpcm")]
            ima_adpcm = 0x2,
            
            [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "none (little endian")]
            none__little_endian = 0x3,
            
            [EditorMarkUpAttribute(displayName: "wma")]
            wma = 0x4,
        }
    }
    #endregion
    
    #region old_sound_permutation_info_block
    [TagBlockDefinitionAttribute(cacheFileSize: 20, tagFileSize: 20, alignment: 4, maxBlockCount: 32)]
    public class old_sound_permutation_info_block
    {
        
        [PaddingAttribute(PaddingType.Padding, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "mouth data")]
        [TagDataAttribute(maxSize: 8192, alignment: 4, maxSizeString: "MAXIMUM_SOUND_MOUTH_DATA_SIZE")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagData mouth_data;
    }
    #endregion
}
