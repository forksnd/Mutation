//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mutation.Halo.TagGroups.Tags
{
    using System;
    using System.IO;
    using Mutation.Halo;
    using Mutation.Halo.TagGroups;
    using Mutation.Halo.TagGroups.Attributes;
    using Mutation.Halo.TagGroups.FieldTypes;
    
    
    [TagGroupDefinitionAttribute(cacheFileSize: 236, tagFileSize: 372, version: 1, groupTag: "char", parentGroupTag: "", name: "character", minimumVersion: EngineVersion.Halo2Xbox, maximumVersion: EngineVersion.Halo2Vista)]
    public class character_block
    {
        
        [EditorMarkUpAttribute(displayName: "Character flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_character_flags character_flags;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "parent character")]
        [TagReferenceAttribute("char")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference parent_character;
        
        [EditorMarkUpAttribute(displayName: "unit")]
        [TagReferenceAttribute("unit")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference unit;
        
        [EditorMarkUpAttribute(displayName: "creature", tooltipText: "Creature reference for swarm characters ONLY")]
        [TagReferenceAttribute("crea")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference creature;
        
        [EditorMarkUpAttribute(displayName: "style")]
        [TagReferenceAttribute("styl")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference style;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "major character")]
        [TagReferenceAttribute("char")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference major_character;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(displayName: "variants")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_variants_block> variants;
        
        [PaddingAttribute(PaddingType.Useless, 36)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EditorMarkUpAttribute(displayName: "general properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_general_block> general_properties;
        
        [EditorMarkUpAttribute(displayName: "vitality properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_vitality_block> vitality_properties;
        
        [EditorMarkUpAttribute(displayName: "placement properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_placement_block> placement_properties;
        
        [EditorMarkUpAttribute(displayName: "perception properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_perception_block> perception_properties;
        
        [EditorMarkUpAttribute(displayName: "look properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_look_block> look_properties;
        
        [EditorMarkUpAttribute(displayName: "movement properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_movement_block> movement_properties;
        
        [EditorMarkUpAttribute(displayName: "swarm properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_swarm_block> swarm_properties;
        
        [PaddingAttribute(PaddingType.Useless, 36)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [EditorMarkUpAttribute(displayName: "ready properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_ready_block> ready_properties;
        
        [EditorMarkUpAttribute(displayName: "engage properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_engage_block> engage_properties;
        
        [EditorMarkUpAttribute(displayName: "charge properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_charge_block> charge_properties;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "Danger Values", explanation: "Danger values can be found in the ai-globals section of the globals tag.");
        
        [EditorMarkUpAttribute(displayName: "evasion properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_evasion_block> evasion_properties;
        
        [EditorMarkUpAttribute(displayName: "cover properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_cover_block> cover_properties;
        
        [EditorMarkUpAttribute(displayName: "retreat properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_retreat_block> retreat_properties;
        
        [EditorMarkUpAttribute(displayName: "search properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_search_block> search_properties;
        
        [EditorMarkUpAttribute(displayName: "pre-search properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_presearch_block> pre_search_properties;
        
        [EditorMarkUpAttribute(displayName: "idle properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_idle_block> idle_properties;
        
        [EditorMarkUpAttribute(displayName: "vocalization properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_vocalization_block> vocalization_properties;
        
        [EditorMarkUpAttribute(displayName: "boarding properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_boarding_block> boarding_properties;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding5;
        
        [EditorMarkUpAttribute(displayName: "boss properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_boss_block> boss_properties;
        
        [EditorMarkUpAttribute(displayName: "weapons properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_weapons_block> weapons_properties;
        
        [EditorMarkUpAttribute(displayName: "firing pattern properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_firing_pattern_properties_block> firing_pattern_properties;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding6;
        
        [EditorMarkUpAttribute(displayName: "grenades properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_grenades_block> grenades_properties;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding7;
        
        [EditorMarkUpAttribute(displayName: "vehicle properties")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_vehicle_block> vehicle_properties;
        
        [FlagsAttribute()]
        public enum b_character_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "Flag1")]
            flag1 = 0x1,
        }
    }
    
    #region character_variants_block
    [TagBlockDefinitionAttribute(cacheFileSize: 12, tagFileSize: 12, alignment: 4, maxBlockCount: 64)]
    public class character_variants_block
    {
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.BlockName, displayName: "variant name")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public string_id variant_name;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "variant index")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short variant_index;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "variant designator")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public string_id variant_designator;
    }
    #endregion
    
    #region character_general_block
    [TagBlockDefinitionAttribute(cacheFileSize: 12, tagFileSize: 12, alignment: 4, maxBlockCount: 1)]
    public class character_general_block
    {
        
        [EditorMarkUpAttribute(displayName: "general flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_general_flags general_flags;
        
        [EditorMarkUpAttribute(displayName: "type")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_type type;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [PaddingAttribute(PaddingType.Useless, 100)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "scariness", tooltipText: "the inherent scariness of the character")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float scariness;
        
        [FlagsAttribute()]
        public enum b_general_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "swarm")]
            swarm = 0x1,
            
            [EditorMarkUpAttribute(displayName: "flying")]
            flying = 0x2,
            
            [EditorMarkUpAttribute(displayName: "dual wields")]
            dual_wields = 0x4,
            
            [EditorMarkUpAttribute(displayName: "uses gravemind")]
            uses_gravemind = 0x8,
        }
        
        public enum e_type : short
        {
            
            [EditorMarkUpAttribute(displayName: "elite")]
            elite = 0x0,
            
            [EditorMarkUpAttribute(displayName: "jackal")]
            jackal = 0x1,
            
            [EditorMarkUpAttribute(displayName: "grunt")]
            grunt = 0x2,
            
            [EditorMarkUpAttribute(displayName: "hunter")]
            hunter = 0x3,
            
            [EditorMarkUpAttribute(displayName: "engineer")]
            engineer = 0x4,
            
            [EditorMarkUpAttribute(displayName: "assassin")]
            assassin = 0x5,
            
            [EditorMarkUpAttribute(displayName: "player")]
            player = 0x6,
            
            [EditorMarkUpAttribute(displayName: "marine")]
            marine = 0x7,
            
            [EditorMarkUpAttribute(displayName: "crew")]
            crew = 0x8,
            
            [EditorMarkUpAttribute(displayName: "combat_form")]
            combat_form = 0x9,
            
            [EditorMarkUpAttribute(displayName: "infection_form")]
            infection_form = 0xa,
            
            [EditorMarkUpAttribute(displayName: "carrier_form")]
            carrier_form = 0xb,
            
            [EditorMarkUpAttribute(displayName: "monitor")]
            monitor = 0xc,
            
            [EditorMarkUpAttribute(displayName: "sentinel")]
            sentinel = 0xd,
            
            [EditorMarkUpAttribute(displayName: "none")]
            none = 0xe,
            
            [EditorMarkUpAttribute(displayName: "mounted_weapon")]
            mounted_weapon = 0xf,
            
            [EditorMarkUpAttribute(displayName: "brute")]
            brute = 0x10,
            
            [EditorMarkUpAttribute(displayName: "prophet")]
            prophet = 0x11,
            
            [EditorMarkUpAttribute(displayName: "bugger")]
            bugger = 0x12,
            
            [EditorMarkUpAttribute(displayName: "juggernaut")]
            juggernaut = 0x13,
        }
    }
    #endregion
    
    #region character_vitality_block
    [TagBlockDefinitionAttribute(cacheFileSize: 112, tagFileSize: 112, alignment: 4, maxBlockCount: 1)]
    public class character_vitality_block
    {
        
        [EditorMarkUpAttribute(displayName: "vitality flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_vitality_flags vitality_flags;
        
        [EditorMarkUpAttribute(displayName: "normal body vitality", tooltipText: "maximum body vitality of our unit")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float normal_body_vitality;
        
        [EditorMarkUpAttribute(displayName: "normal shield vitality", tooltipText: "maximum shield vitality of our unit")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float normal_shield_vitality;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "legendary body vitality", tooltipText: "maximum body vitality of our unit (on legendary)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float legendary_body_vitality;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "legendary shield vitality", tooltipText: "maximum shield vitality of our unit (on legendary)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float legendary_shield_vitality;
        
        [EditorMarkUpAttribute(displayName: "body recharge fraction", tooltipText: "fraction of body health that can be regained after damage")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float body_recharge_fraction;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "soft ping threshold (with shields", tooltipText: "damage necessary to trigger a soft ping when shields are up")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float soft_ping_threshold__with_shields;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "soft ping threshold (no shields", tooltipText: "damage necessary to trigger a soft ping when shields are down")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float soft_ping_threshold__no_shields;
        
        [EditorMarkUpAttribute(displayName: "soft ping min interrupt time", tooltipText: "minimum time before a soft ping can be interrupted")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float soft_ping_min_interrupt_time;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "hard ping threshold (with shields", tooltipText: "damage necessary to trigger a hard ping when shields are up")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float hard_ping_threshold__with_shields;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "hard ping threshold (no shields", tooltipText: "damage necessary to trigger a hard ping when shields are down")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float hard_ping_threshold__no_shields;
        
        [EditorMarkUpAttribute(displayName: "hard ping min interrupt time", tooltipText: "minimum time before a hard ping can be interrupted")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float hard_ping_min_interrupt_time;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "current damage decay delay", tooltipText: "current damage begins to fall after a time delay has passed since last the damage" +
    "")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float current_damage_decay_delay;
        
        [EditorMarkUpAttribute(displayName: "current damage decay time", tooltipText: "amount of time it would take for 100% current damage to decay to 0")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float current_damage_decay_time;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(displayName: "recent damage decay delay", tooltipText: "recent damage begins to fall after a time delay has passed since last the damage")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float recent_damage_decay_delay;
        
        [EditorMarkUpAttribute(displayName: "recent damage decay time", tooltipText: "amount of time it would take for 100% recent damage to decay to 0")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float recent_damage_decay_time;
        
        [EditorMarkUpAttribute(displayName: "body recharge delay time", tooltipText: "amount of time delay before a shield begins to recharge")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float body_recharge_delay_time;
        
        [EditorMarkUpAttribute(displayName: "body recharge time", tooltipText: "amount of time for shields to recharge completely")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float body_recharge_time;
        
        [EditorMarkUpAttribute(displayName: "shield recharge delay time", tooltipText: "amount of time delay before a shield begins to recharge")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float shield_recharge_delay_time;
        
        [EditorMarkUpAttribute(displayName: "shield recharge time", tooltipText: "amount of time for shields to recharge completely")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float shield_recharge_time;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "stun threshold", tooltipText: "stun level that triggers the stunned state (currently, the \'stunned\' behavior)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float stun_threshold;
        
        [EditorMarkUpAttribute(displayName: "stun time bounds", unitsSpecifier: "seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds stun_time_bounds;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EditorMarkUpAttribute(displayName: "extended shield damage threshold", unitsSpecifier: "%", tooltipText: "Amount of shield damage sustained before it is considered \'extended\'")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float extended_shield_damage_threshold;
        
        [EditorMarkUpAttribute(displayName: "extended body damage threshold", unitsSpecifier: "%", tooltipText: "Amount of body damage sustained before it is considered \'extended\'")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float extended_body_damage_threshold;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [EditorMarkUpAttribute(displayName: "suicide radius", tooltipText: "when I die and explode, I damage stuff within this distance of me.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float suicide_radius;
        
        [PaddingAttribute(PaddingType.Skip, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding5;
        
        [FlagsAttribute()]
        public enum b_vitality_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "unused")]
            unused = 0x1,
        }
    }
    #endregion
    
    #region character_placement_block
    [TagBlockDefinitionAttribute(cacheFileSize: 52, tagFileSize: 52, alignment: 4, maxBlockCount: 1)]
    public class character_placement_block
    {
        
        [PaddingAttribute(PaddingType.Padding, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "few upgrade chance (easy")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float few_upgrade_chance__easy;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "few upgrade chance (normal")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float few_upgrade_chance__normal;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "few upgrade chance (heroic")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float few_upgrade_chance__heroic;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "few upgrade chance (legendary")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float few_upgrade_chance__legendary;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "normal upgrade chance (easy")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float normal_upgrade_chance__easy;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "normal upgrade chance (normal")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float normal_upgrade_chance__normal;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "normal upgrade chance (heroic")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float normal_upgrade_chance__heroic;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "normal upgrade chance (legendary")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float normal_upgrade_chance__legendary;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "many upgrade chance (easy")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float many_upgrade_chance__easy;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "many upgrade chance (normal")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float many_upgrade_chance__normal;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "many upgrade chance (heroic")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float many_upgrade_chance__heroic;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "many upgrade chance (legendary")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float many_upgrade_chance__legendary;
    }
    #endregion
    
    #region character_perception_block
    [TagBlockDefinitionAttribute(cacheFileSize: 52, tagFileSize: 52, alignment: 4, maxBlockCount: 4)]
    public class character_perception_block
    {
        
        [EditorMarkUpAttribute(displayName: "perception flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_perception_flags perception_flags;
        
        [EditorMarkUpAttribute(displayName: "max vision distance", unitsSpecifier: "world units", tooltipText: "maximum range of sight")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float max_vision_distance;
        
        [EditorMarkUpAttribute(displayName: "central vision angle", unitsSpecifier: "degrees", tooltipText: "horizontal angle within which we see targets out to our maximum range")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float central_vision_angle;
        
        [EditorMarkUpAttribute(displayName: "max vision angle", unitsSpecifier: "degrees", tooltipText: "maximum horizontal angle within which we see targets at range")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float max_vision_angle;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "peripheral vision angle", unitsSpecifier: "degrees", tooltipText: "maximum horizontal angle within which we can see targets out of the corner of our" +
    " eye")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float peripheral_vision_angle;
        
        [EditorMarkUpAttribute(displayName: "peripheral distance", unitsSpecifier: "world units", tooltipText: "maximum range at which we can see targets our of the corner of our eye")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float peripheral_distance;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(displayName: "hearing distance", unitsSpecifier: "world units", tooltipText: "maximum range at which sounds can be heard")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float hearing_distance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "notice projectile chance", unitsSpecifier: "[0,1]", tooltipText: "random chance of noticing a dangerous enemy projectile (e.g. grenade)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float notice_projectile_chance;
        
        [EditorMarkUpAttribute(displayName: "notice vehicle chance", unitsSpecifier: "[0,1]", tooltipText: "random chance of noticing a dangerous vehicle")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float notice_vehicle_chance;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EditorMarkUpAttribute(displayName: "combat perception time", unitsSpecifier: "seconds", tooltipText: "time required to acknowledge a visible enemy when we are already in combat or sea" +
    "rching for them")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float combat_perception_time;
        
        [EditorMarkUpAttribute(displayName: "guard perception time", unitsSpecifier: "seconds", tooltipText: "time required to acknowledge a visible enemy when we have been alerted")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float guard_perception_time;
        
        [EditorMarkUpAttribute(displayName: "non-combat perception time", unitsSpecifier: "seconds", tooltipText: "time required to acknowledge a visible enemy when we are not alerted")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float non_combat_perception_time;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [EditorMarkUpAttribute(displayName: "first ack. surprise distance", unitsSpecifier: "world units", tooltipText: "If a new prop is acknowledged within the given distance, surprise is registerd")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float first_ack__surprise_distance;
        
        [FlagsAttribute()]
        public enum b_perception_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "Flag1")]
            flag1 = 0x1,
        }
    }
    #endregion
    
    #region character_look_block
    [TagBlockDefinitionAttribute(cacheFileSize: 80, tagFileSize: 80, alignment: 4, maxBlockCount: 1)]
    public class character_look_block
    {
        
        [EditorMarkUpAttribute(displayName: "maximum aiming deviation", unitsSpecifier: "degrees", tooltipText: "how far we can turn our weapon")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealEulerAngle2d maximum_aiming_deviation;
        
        [EditorMarkUpAttribute(displayName: "maximum looking deviation", unitsSpecifier: "degrees", tooltipText: "how far we can turn our head")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealEulerAngle2d maximum_looking_deviation;
        
        [PaddingAttribute(PaddingType.Padding, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "noncombat look delta L", unitsSpecifier: "degrees", tooltipText: "how far we can turn our head left away from our aiming vector when not in combat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float noncombat_look_delta_l;
        
        [EditorMarkUpAttribute(displayName: "noncombat look delta R", unitsSpecifier: "degrees", tooltipText: "how far we can turn our head right away from our aiming vector when not in combat" +
    "")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float noncombat_look_delta_r;
        
        [EditorMarkUpAttribute(displayName: "combat look delta L", unitsSpecifier: "degrees", tooltipText: "how far we can turn our head left away from our aiming vector when in combat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float combat_look_delta_l;
        
        [EditorMarkUpAttribute(displayName: "combat look delta R", unitsSpecifier: "degrees", tooltipText: "how far we can turn our head right away from our aiming vector when in combat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float combat_look_delta_r;
        
        [EditorMarkUpAttribute(displayName: "noncombat idle looking", unitsSpecifier: "seconds", tooltipText: "rate at which we change look around randomly when not in combat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds noncombat_idle_looking;
        
        [EditorMarkUpAttribute(displayName: "noncombat idle aiming", unitsSpecifier: "seconds", tooltipText: "rate at which we change aiming directions when looking around randomly when not i" +
    "n combat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds noncombat_idle_aiming;
        
        [EditorMarkUpAttribute(displayName: "combat idle looking", unitsSpecifier: "seconds", tooltipText: "rate at which we change look around randomly when searching or in combat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds combat_idle_looking;
        
        [EditorMarkUpAttribute(displayName: "combat idle aiming", unitsSpecifier: "seconds", tooltipText: "rate at which we change aiming directions when looking around randomly when searc" +
    "hing or in combat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds combat_idle_aiming;
    }
    #endregion
    
    #region character_movement_block
    [TagBlockDefinitionAttribute(cacheFileSize: 36, tagFileSize: 36, alignment: 4, maxBlockCount: 1)]
    public class character_movement_block
    {
        
        [EditorMarkUpAttribute(displayName: "movement flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_movement_flags movement_flags;
        
        [EditorMarkUpAttribute(displayName: "pathfinding radius")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float pathfinding_radius;
        
        [EditorMarkUpAttribute(displayName: "destination radius")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float destination_radius;
        
        [PaddingAttribute(PaddingType.Useless, 20)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "dive grenade chance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float dive_grenade_chance;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "obstacle leap min size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_obstacle_leap_min_size obstacle_leap_min_size;
        
        [EditorMarkUpAttribute(displayName: "obstacle leap max size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_obstacle_leap_min_size obstacle_leap_max_size;
        
        [EditorMarkUpAttribute(displayName: "obstacle ignore size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_obstacle_leap_min_size obstacle_ignore_size;
        
        [EditorMarkUpAttribute(displayName: "obstacle smashable size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_obstacle_leap_min_size obstacle_smashable_size;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(displayName: "jump height")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_jump_height jump_height;
        
        [EditorMarkUpAttribute(displayName: "movement hints")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_movement_hints movement_hints;
        
        [EditorMarkUpAttribute(displayName: "throttle scale")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float throttle_scale;
        
        [FlagsAttribute()]
        public enum b_movement_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "danger crouch allow movement")]
            danger_crouch_allow_movement = 0x1,
            
            [EditorMarkUpAttribute(displayName: "no side-step")]
            no_side_step = 0x2,
            
            [EditorMarkUpAttribute(displayName: "prefer to combar near friends")]
            prefer_to_combar_near_friends = 0x4,
            
            [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "hop (to cover path segements")]
            hop__to_cover_path_segements = 0x8,
            
            [EditorMarkUpAttribute(displayName: "perch")]
            perch = 0x10,
            
            [EditorMarkUpAttribute(displayName: "has flying mode")]
            has_flying_mode = 0x20,
            
            [EditorMarkUpAttribute(displayName: "disallow crouch")]
            disallow_crouch = 0x40,
        }
        
        public enum e_obstacle_leap_min_size : short
        {
            
            [EditorMarkUpAttribute(displayName: "none")]
            none = 0x0,
            
            [EditorMarkUpAttribute(displayName: "tiny")]
            tiny = 0x1,
            
            [EditorMarkUpAttribute(displayName: "small")]
            small = 0x2,
            
            [EditorMarkUpAttribute(displayName: "medium")]
            medium = 0x3,
            
            [EditorMarkUpAttribute(displayName: "large")]
            large = 0x4,
            
            [EditorMarkUpAttribute(displayName: "huge")]
            huge = 0x5,
            
            [EditorMarkUpAttribute(displayName: "immobile")]
            immobile = 0x6,
        }
        
        public enum e_jump_height : short
        {
            
            [EditorMarkUpAttribute(displayName: "NONE")]
            none = 0x0,
            
            [EditorMarkUpAttribute(displayName: "down")]
            down = 0x1,
            
            [EditorMarkUpAttribute(displayName: "step")]
            step = 0x2,
            
            [EditorMarkUpAttribute(displayName: "crouch")]
            crouch = 0x3,
            
            [EditorMarkUpAttribute(displayName: "stand")]
            stand = 0x4,
            
            [EditorMarkUpAttribute(displayName: "storey")]
            storey = 0x5,
            
            [EditorMarkUpAttribute(displayName: "tower")]
            tower = 0x6,
            
            [EditorMarkUpAttribute(displayName: "infinite")]
            infinite = 0x7,
        }
        
        [FlagsAttribute()]
        public enum b_movement_hints : uint
        {
            
            [EditorMarkUpAttribute(displayName: "vault step")]
            vault_step = 0x1,
            
            [EditorMarkUpAttribute(displayName: "vault crouch")]
            vault_crouch = 0x2,
            
            [EditorMarkUpAttribute(displayName: "mount step")]
            mount_step = 0x20,
            
            [EditorMarkUpAttribute(displayName: "mount crouch")]
            mount_crouch = 0x40,
            
            [EditorMarkUpAttribute(displayName: "mount stand")]
            mount_stand = 0x80,
            
            [EditorMarkUpAttribute(displayName: "hoist crouch")]
            hoist_crouch = 0x800,
            
            [EditorMarkUpAttribute(displayName: "hoist stand")]
            hoist_stand = 0x1000,
        }
    }
    #endregion
    
    #region character_swarm_block
    [TagBlockDefinitionAttribute(cacheFileSize: 40, tagFileSize: 40, alignment: 4, maxBlockCount: 3)]
    public class character_swarm_block
    {
        
        [PaddingAttribute(PaddingType.Useless, 48)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "scatter killed count", tooltipText: "After the given number of deaths, the swarm scatters")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short scatter_killed_count;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "scatter radius", tooltipText: "the distance from the target that the swarm scatters")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float scatter_radius;
        
        [EditorMarkUpAttribute(displayName: "scatter time", tooltipText: "amount of time to remain scattered")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float scatter_time;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(displayName: "hound min distance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float hound_min_distance;
        
        [EditorMarkUpAttribute(displayName: "hound max distance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float hound_max_distance;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EditorMarkUpAttribute(displayName: "perlin offset scale", unitsSpecifier: "[0-1]", tooltipText: "amount of randomness added to creature\'s throttle")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float perlin_offset_scale;
        
        [EditorMarkUpAttribute(displayName: "offset period", unitsSpecifier: "s", tooltipText: "how fast the creature changes random offset to throttle")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds offset_period;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "perlin idle movement threshold", unitsSpecifier: "[0-1]", tooltipText: "a random offset lower then given threshold is made 0. (threshold of 1 = no moveme" +
    "nt)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float perlin_idle_movement_threshold;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "perlin combat movement threshold", unitsSpecifier: "[0-1]", tooltipText: "a random offset lower then given threshold is made 0. (threshold of 1 = no moveme" +
    "nt)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float perlin_combat_movement_threshold;
    }
    #endregion
    
    #region character_ready_block
    [TagBlockDefinitionAttribute(cacheFileSize: 8, tagFileSize: 8, alignment: 4, maxBlockCount: 3)]
    public class character_ready_block
    {
        
        [EditorMarkUpAttribute(displayName: "ready time bounds", tooltipText: "Character will pause for given time before engaging threat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds ready_time_bounds;
    }
    #endregion
    
    #region character_engage_block
    [TagBlockDefinitionAttribute(cacheFileSize: 16, tagFileSize: 16, alignment: 4, maxBlockCount: 3)]
    public class character_engage_block
    {
        
        [EditorMarkUpAttribute(displayName: "flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_flags flags;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "Crouch danger threshold", tooltipText: "When danger rises above the threshold, the actor crouches")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float crouch_danger_threshold;
        
        [EditorMarkUpAttribute(displayName: "Stand danger threshold", tooltipText: "When danger drops below this threshold, the actor can stand again.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float stand_danger_threshold;
        
        [EditorMarkUpAttribute(displayName: "Fight danger move threshold", tooltipText: "When danger goes above given level, this actor switches firing positions")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float fight_danger_move_threshold;
        
        [FlagsAttribute()]
        public enum b_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "engage perch")]
            engage_perch = 0x1,
            
            [EditorMarkUpAttribute(displayName: "fight constant movement")]
            fight_constant_movement = 0x2,
            
            [EditorMarkUpAttribute(displayName: "flight fight constant movement")]
            flight_fight_constant_movement = 0x4,
        }
    }
    #endregion
    
    #region character_charge_block
    [TagBlockDefinitionAttribute(cacheFileSize: 64, tagFileSize: 64, alignment: 4, maxBlockCount: 3)]
    public class character_charge_block
    {
        
        [EditorMarkUpAttribute(displayName: "Charge flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_charge_flags charge_flags;
        
        [EditorMarkUpAttribute(displayName: "melee consider range")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_consider_range;
        
        [EditorMarkUpAttribute(displayName: "melee chance", tooltipText: "chance of initiating a melee within a 1 second period")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_chance;
        
        [EditorMarkUpAttribute(displayName: "melee attack range")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_attack_range;
        
        [EditorMarkUpAttribute(displayName: "melee abort range")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_abort_range;
        
        [EditorMarkUpAttribute(displayName: "melee attack timeout", unitsSpecifier: "seconds", tooltipText: "Give up after given amount of time spent charging")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_attack_timeout;
        
        [EditorMarkUpAttribute(displayName: "melee attack delay timer", unitsSpecifier: "seconds", tooltipText: "don\'t attempt again before given time since last melee")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_attack_delay_timer;
        
        [EditorMarkUpAttribute(displayName: "melee leap range")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds melee_leap_range;
        
        [EditorMarkUpAttribute(displayName: "melee leap chance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_leap_chance;
        
        [EditorMarkUpAttribute(displayName: "ideal leap velocity")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ideal_leap_velocity;
        
        [EditorMarkUpAttribute(displayName: "max leap velocity")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float max_leap_velocity;
        
        [EditorMarkUpAttribute(displayName: "melee leap ballistic")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_leap_ballistic;
        
        [EditorMarkUpAttribute(displayName: "melee delay timer", unitsSpecifier: "seconds", tooltipText: "time between melee leaps")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float melee_delay_timer;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "berserk weapon", tooltipText: "when I berserk, I pull out a ...")]
        [TagReferenceAttribute("weap")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference berserk_weapon;
        
        [FlagsAttribute()]
        public enum b_charge_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "offhand melee allowed")]
            offhand_melee_allowed = 0x1,
            
            [EditorMarkUpAttribute(displayName: "berserk whenever charge")]
            berserk_whenever_charge = 0x2,
        }
    }
    #endregion
    
    #region character_evasion_block
    [TagBlockDefinitionAttribute(cacheFileSize: 20, tagFileSize: 20, alignment: 4, maxBlockCount: 3)]
    public class character_evasion_block
    {
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "Evasion danger threshold", tooltipText: "Consider evading when immediate danger surpasses threshold")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float evasion_danger_threshold;
        
        [EditorMarkUpAttribute(displayName: "Evasion delay timer", tooltipText: "Wait at least this delay between evasions")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float evasion_delay_timer;
        
        [EditorMarkUpAttribute(displayName: "Evasion chance", tooltipText: "If danger is above threshold, the chance that we will evade. Expressed as chance " +
    "of evading within a 1 second time period")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float evasion_chance;
        
        [EditorMarkUpAttribute(displayName: "Evasion proximity threshold", tooltipText: "If target is within given proximity, possibly evade")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float evasion_proximity_threshold;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "dive retreat chance", tooltipText: "Chance of retreating (fleeing) after danger avoidance dive")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float dive_retreat_chance;
    }
    #endregion
    
    #region character_cover_block
    [TagBlockDefinitionAttribute(cacheFileSize: 64, tagFileSize: 64, alignment: 4, maxBlockCount: 3)]
    public class character_cover_block
    {
        
        [EditorMarkUpAttribute(displayName: "cover flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_cover_flags cover_flags;
        
        [EditorMarkUpAttribute(displayName: "hide behind cover time", unitsSpecifier: "seconds", tooltipText: "how long we stay behind cover after seeking cover")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds hide_behind_cover_time;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "Cover vitality threshold", tooltipText: "When vitality drops below this level, possibly trigger a cover")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float cover_vitality_threshold;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "Cover shield fraction", tooltipText: "trigger cover when shield drops below this fraction (low shield cover impulse mus" +
    "t be enabled)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float cover_shield_fraction;
        
        [EditorMarkUpAttribute(displayName: "Cover check delay", tooltipText: "amount of time I will wait before trying again after covering")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float cover_check_delay;
        
        [EditorMarkUpAttribute(displayName: "Emerge from cover when shield fraction reaches threshold", tooltipText: "Emerge from cover when shield fraction reaches threshold")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float emerge_from_cover_when_shield_fraction_reaches_threshold;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "Cover danger threshold", tooltipText: "Danger must be this high to cover. At a danger level of \'danger threshold\', the c" +
    "hance of seeking cover is the cover chance lower bound (below)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float cover_danger_threshold;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "Danger upper threshold", tooltipText: "At or above danger level of upper threshold, the chance of seeking cover is the c" +
    "over chance upper bound (below)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float danger_upper_threshold;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "Cover chance", explanation: @"The Bounds on the chance of seeking cover.
The lower bound is valid when the danger is at 'danger threshold'
The upper bound is valid when the danger is at or above 'danger upper threshold'.
It is interpolated linearly everywhere in between.
 All chances are expressed as 'chance of triggering cover in a 1 second period'.");
        
        [EditorMarkUpAttribute(displayName: "Cover chance", tooltipText: "Bounds on the chances of seeking cover.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds cover_chance;
        
        [EditorMarkUpAttribute(displayName: "Proximity self-preserve", unitsSpecifier: "wus", tooltipText: "When the proximity_self_preservation impulse is enabled, triggers self-preservati" +
    "on when target within this distance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float proximity_self_preserve;
        
        [EditorMarkUpAttribute(displayName: "Disallow cover distance", unitsSpecifier: "world units", tooltipText: "Disallow covering from visible target under the given distance away")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float disallow_cover_distance;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "proximity melee distance", tooltipText: "When self preserving from a target less than given distance, causes melee attack " +
    "(assuming proximity_melee_impulse is enabled)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float proximity_melee_distance;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "unreachable enemy danger threshold", tooltipText: "When danger from an unreachable enemy surpasses threshold, actor cover (assuming " +
    "unreachable_enemy_cover impulse is enabled)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float unreachable_enemy_danger_threshold;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "scary target threshold", tooltipText: "When target is aware of me and surpasses the given scariness, self-preserve (scar" +
    "y_target_cover_impulse)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float scary_target_threshold;
        
        [FlagsAttribute()]
        public enum b_cover_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "Flag1")]
            flag1 = 0x1,
        }
    }
    #endregion
    
    #region character_retreat_block
    [TagBlockDefinitionAttribute(cacheFileSize: 76, tagFileSize: 76, alignment: 4, maxBlockCount: 3)]
    public class character_retreat_block
    {
        
        [EditorMarkUpAttribute(displayName: "Retreat flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_retreat_flags retreat_flags;
        
        [EditorMarkUpAttribute(displayName: "Shield threshold", tooltipText: "When shield vitality drops below given amount, retreat is triggered by low_shield" +
    "_retreat_impulse")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float shield_threshold;
        
        [EditorMarkUpAttribute(displayName: "Scary target threshold", tooltipText: "When confronting an enemy of over the given scariness, retreat is triggered by sc" +
    "ary_target_retreat_impulse")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float scary_target_threshold;
        
        [EditorMarkUpAttribute(displayName: "Danger threshold", tooltipText: "When perceived danger rises above the given threshold, retreat is triggered by da" +
    "nger_retreat_impulse")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float danger_threshold;
        
        [EditorMarkUpAttribute(displayName: "Proximity threshold", tooltipText: "When enemy closer than given threshold, retreat is triggered by proximity_retreat" +
    "_impulse")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float proximity_threshold;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "min/max forced cower time bounds", tooltipText: "actor cowers for at least the given amount of time")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds min_max_forced_cower_time_bounds;
        
        [EditorMarkUpAttribute(displayName: "min/max cower timeout bounds", tooltipText: "actor times out of cower after the given amount of time")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds min_max_cower_timeout_bounds;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "proximity ambush threshold", tooltipText: "If target reaches is within the given proximity, an ambush is triggered by the pr" +
    "oximity ambush impulse")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float proximity_ambush_threshold;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "awareness ambush threshold", tooltipText: "If target is less than threshold (0-1) aware of me, an ambush is triggered by the" +
    " vulnerable enemy ambush impulse")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float awareness_ambush_threshold;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(displayName: "leader dead retreat chance", tooltipText: "If leader-dead-retreat-impulse is active, gives the chance that we will flee when" +
    " our leader dies within 4 world units of us")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float leader_dead_retreat_chance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "peer dead retreat chance", tooltipText: "If peer-dead-retreat-impulse is active, gives the chance that we will flee when o" +
    "ne of our peers (friend of the same race) dies within 4 world units of us")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float peer_dead_retreat_chance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "second peer dead retreat chance", tooltipText: "If peer-dead-retreat-impulse is active, gives the chance that we will flee when a" +
    " second peer (friend of the same race) dies within 4 world units of us")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float second_peer_dead_retreat_chance;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EditorMarkUpAttribute(displayName: "zig-zag angle", unitsSpecifier: "degrees", tooltipText: "The angle from the intended destination direction that a zig-zag will cause")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float zig_zag_angle;
        
        [EditorMarkUpAttribute(displayName: "zig-zag period", unitsSpecifier: "seconds", tooltipText: "How long it takes to zig left and then zag right.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float zig_zag_period;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [EditorMarkUpAttribute(displayName: "retreat grenade chance", tooltipText: "The likelihood of throwing down a grenade to cover our retreat")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float retreat_grenade_chance;
        
        [EditorMarkUpAttribute(displayName: "backup weapon", tooltipText: "If I want to flee and I don\'t have flee animations with my current weapon, throw " +
    "it away and try a ...")]
        [TagReferenceAttribute("weap")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference backup_weapon;
        
        [FlagsAttribute()]
        public enum b_retreat_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "Zig-zag when fleeing")]
            zig_zag_when_fleeing = 0x1,
            
            [EditorMarkUpAttribute(displayName: "Unused1")]
            unused1 = 0x2,
        }
    }
    #endregion
    
    #region character_search_block
    [TagBlockDefinitionAttribute(cacheFileSize: 20, tagFileSize: 20, alignment: 4, maxBlockCount: 3)]
    public class character_search_block
    {
        
        [EditorMarkUpAttribute(displayName: "Search flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_search_flags search_flags;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "search time")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds search_time;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "Uncover");
        
        [EditorMarkUpAttribute(displayName: "Uncover distance bounds", tooltipText: "Distance of uncover point from target. Hard lower limit, soft upper limit.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds uncover_distance_bounds;
        
        [FlagsAttribute()]
        public enum b_search_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "crouch on investigate")]
            crouch_on_investigate = 0x1,
            
            [EditorMarkUpAttribute(displayName: "walk on pursuit")]
            walk_on_pursuit = 0x2,
        }
    }
    #endregion
    
    #region character_presearch_block
    [TagBlockDefinitionAttribute(cacheFileSize: 36, tagFileSize: 36, alignment: 4, maxBlockCount: 3)]
    public class character_presearch_block
    {
        
        [EditorMarkUpAttribute(displayName: "Pre-search flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_pre_search_flags pre_search_flags;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "min presearch time", unitsSpecifier: "seconds", tooltipText: "If the min presearch time expires and the target is (actually) outside the min-ce" +
    "rtainty radius, presearch turns off")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds min_presearch_time;
        
        [EditorMarkUpAttribute(displayName: "max presearch time", unitsSpecifier: "seconds", tooltipText: "Presearch turns off after the given time")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds max_presearch_time;
        
        [EditorMarkUpAttribute(displayName: "Min certainty radius")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float min_certainty_radius;
        
        [EditorMarkUpAttribute(displayName: "DEPRECATED")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float deprecated;
        
        [EditorMarkUpAttribute(displayName: "min suppressing time", tooltipText: "if the min suppressing time expires and the target is outside the min-certainty r" +
    "adius, suppressing fire turns off")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds min_suppressing_time;
        
        [FlagsAttribute()]
        public enum b_pre_search_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "Flag1")]
            flag1 = 0x1,
        }
    }
    #endregion
    
    #region character_idle_block
    [TagBlockDefinitionAttribute(cacheFileSize: 12, tagFileSize: 12, alignment: 4, maxBlockCount: 3)]
    public class character_idle_block
    {
        
        [PaddingAttribute(PaddingType.Padding, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "idle pose delay time", unitsSpecifier: "seconds", tooltipText: "time range for delays between idle poses")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds idle_pose_delay_time;
    }
    #endregion
    
    #region character_vocalization_block
    [TagBlockDefinitionAttribute(cacheFileSize: 8, tagFileSize: 8, alignment: 4, maxBlockCount: 1)]
    public class character_vocalization_block
    {
        
        [EditorMarkUpAttribute(displayName: "look comment time", unitsSpecifier: "s", tooltipText: "How long does the player look at an AI before the AI responds?")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float look_comment_time;
        
        [EditorMarkUpAttribute(displayName: "look long comment time", unitsSpecifier: "s", tooltipText: "How long does the player look at the AI before he responds with his \'long look\' c" +
    "omment?")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float look_long_comment_time;
    }
    #endregion
    
    #region character_boarding_block
    [TagBlockDefinitionAttribute(cacheFileSize: 16, tagFileSize: 16, alignment: 4, maxBlockCount: 1)]
    public class character_boarding_block
    {
        
        [EditorMarkUpAttribute(displayName: "flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_flags flags;
        
        [EditorMarkUpAttribute(displayName: "max distance", unitsSpecifier: "wus", tooltipText: "maximum distance from entry point that we will consider boarding")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float max_distance;
        
        [EditorMarkUpAttribute(displayName: "abort distance", unitsSpecifier: "wus", tooltipText: "give up trying to get in boarding seat if entry point is further away than this")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float abort_distance;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "max speed", unitsSpecifier: "wu/s", tooltipText: "maximum speed at which we will consider boarding")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float max_speed;
        
        [FlagsAttribute()]
        public enum b_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "airborne boarding")]
            airborne_boarding = 0x1,
        }
    }
    #endregion
    
    #region character_boss_block
    [TagBlockDefinitionAttribute(cacheFileSize: 12, tagFileSize: 12, alignment: 4, maxBlockCount: 1)]
    public class character_boss_block
    {
        
        [PaddingAttribute(PaddingType.Padding, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [PaddingAttribute(PaddingType.Useless, 36)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "flurry damage threshold", unitsSpecifier: "[0..1]", tooltipText: "when more than x damage is caused a juggernaut flurry is triggered")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float flurry_damage_threshold;
        
        [EditorMarkUpAttribute(displayName: "flurry time", unitsSpecifier: "seconds", tooltipText: "flurry lasts this long")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float flurry_time;
    }
    #endregion
    
    #region character_weapons_block
    [TagBlockDefinitionAttribute(cacheFileSize: 204, tagFileSize: 204, alignment: 4, maxBlockCount: 100)]
    public class character_weapons_block
    {
        
        [EditorMarkUpAttribute(displayName: "weapons flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_weapons_flags weapons_flags;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.BlockName, displayName: "weapon")]
        [TagReferenceAttribute("weap")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference weapon;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "Combat ranges");
        
        [EditorMarkUpAttribute(displayName: "maximum firing range", unitsSpecifier: "world units", tooltipText: "we can only fire our weapon at targets within this distance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float maximum_firing_range;
        
        [EditorMarkUpAttribute(displayName: "minimum firing range", tooltipText: "weapon will not be fired at target closer than given distance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float minimum_firing_range;
        
        [EditorMarkUpAttribute(displayName: "normal combat range", unitsSpecifier: "world units")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds normal_combat_range;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "bombardment range", tooltipText: "we offset our burst targets randomly by this range when firing at non-visible ene" +
    "mies (zero = never)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float bombardment_range;
        
        [EditorMarkUpAttribute(displayName: "Max special target distance", unitsSpecifier: "world units", tooltipText: "Specific target regions on a vehicle or unit will be fired upon only under the gi" +
    "ven distance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float max_special_target_distance;
        
        [EditorMarkUpAttribute(displayName: "timid combat range", unitsSpecifier: "world units")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds timid_combat_range;
        
        [EditorMarkUpAttribute(displayName: "aggressive combat range", unitsSpecifier: "world units")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds aggressive_combat_range;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField1 = new Explanation(name: "Ballistic Firing");
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "super-ballistic range", tooltipText: "we try to aim our shots super-ballistically if target is outside this range (zero" +
    " = never)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float super_ballistic_range;
        
        [EditorMarkUpAttribute(displayName: "Ballistic firing bounds", unitsSpecifier: "world units", tooltipText: "At the min range, the min ballistic fraction is used, at the max, the max ballist" +
    "ic fraction is used")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds ballistic_firing_bounds;
        
        [EditorMarkUpAttribute(displayName: "Ballistic fraction bounds", unitsSpecifier: "[0-1]", tooltipText: "Controls speed and degree of arc. 0 = high, slow, 1 = low, fast")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds ballistic_fraction_bounds;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField2 = new Explanation(name: "Behavior");
        
        [EditorMarkUpAttribute(displayName: "first burst delay time", unitsSpecifier: "seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds first_burst_delay_time;
        
        [EditorMarkUpAttribute(displayName: "surprise delay time", unitsSpecifier: "seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float surprise_delay_time;
        
        [EditorMarkUpAttribute(displayName: "surprise fire-wildly time", unitsSpecifier: "seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float surprise_fire_wildly_time;
        
        [EditorMarkUpAttribute(displayName: "death fire-wildly chance", unitsSpecifier: "[0,1]")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float death_fire_wildly_chance;
        
        [EditorMarkUpAttribute(displayName: "death fire-wildly time", unitsSpecifier: "seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float death_fire_wildly_time;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(displayName: "custom stand gun offset", tooltipText: "custom standing gun offset for overriding the default in the base actor")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealVector3d custom_stand_gun_offset;
        
        [EditorMarkUpAttribute(displayName: "custom crouch gun offset", tooltipText: "custom crouching gun offset for overriding the default in the base actor")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealVector3d custom_crouch_gun_offset;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField3 = new Explanation(name: "special-case firing properties");
        
        [EditorMarkUpAttribute(displayName: "special-fire mode", tooltipText: "the type of special weapon fire that we can use")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_special_fire_mode special_fire_mode;
        
        [EditorMarkUpAttribute(displayName: "special-fire situation", tooltipText: "when we will decide to use our special weapon fire mode")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_special_fire_situation special_fire_situation;
        
        [EditorMarkUpAttribute(displayName: "special-fire chance", unitsSpecifier: "[0,1]", tooltipText: "how likely we are to use our special weapon fire mode")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float special_fire_chance;
        
        [EditorMarkUpAttribute(displayName: "special-fire delay", unitsSpecifier: "seconds", tooltipText: "how long we must wait between uses of our special weapon fire mode")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float special_fire_delay;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "special damage modifier", unitsSpecifier: "[0,1]", tooltipText: "damage modifier for special weapon fire (applied in addition to the normal damage" +
    " modifier. zero = no change)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float special_damage_modifier;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "special projectile error", unitsSpecifier: "degrees", tooltipText: "projectile error angle for special weapon fire (applied in addition to the normal" +
    " error)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float special_projectile_error;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField4 = new Explanation(name: "Weapon drop when killed");
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "drop weapon loaded", tooltipText: "amount of ammo loaded into the weapon that we drop (in fractions of a clip, e.g. " +
    "0.3 to 0.5)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds drop_weapon_loaded;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "drop weapon ammo", tooltipText: "total number of rounds in the weapon that we drop (ignored for energy weapons)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public ShortBounds drop_weapon_ammo;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding5;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField5 = new Explanation(name: "Accuracy", explanation: @"Parameters control how accuracy changes over the duration of a series of bursts
Accuracy is an analog value between 0 and 1. At zero, the parameters of the first
firing-pattern block is used. At 1, the parameters in the second block is used. In
between, all the values are linearly interpolated");
        
        [EditorMarkUpAttribute(displayName: "normal accuracy bounds", tooltipText: "Indicates starting and ending accuracies at normal difficulty")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds normal_accuracy_bounds;
        
        [EditorMarkUpAttribute(displayName: "normal accuracy time", tooltipText: "The amount of time it takes the accuracy to go from starting to ending")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float normal_accuracy_time;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding6;
        
        [EditorMarkUpAttribute(displayName: "heroic accuracy bounds", tooltipText: "Indicates starting and ending accuracies at heroic difficulty")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds heroic_accuracy_bounds;
        
        [EditorMarkUpAttribute(displayName: "heroic accuracy time", tooltipText: "The amount of time it takes the accuracy to go from starting to ending")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float heroic_accuracy_time;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding7;
        
        [EditorMarkUpAttribute(displayName: "legendary accuracy bounds", tooltipText: "Indicates starting and ending accuracies at legendary difficulty")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds legendary_accuracy_bounds;
        
        [EditorMarkUpAttribute(displayName: "legendary accuracy time", tooltipText: "The amount of time it takes the accuracy to go from starting to ending")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float legendary_accuracy_time;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding8;
        
        [PaddingAttribute(PaddingType.Useless, 48)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding9;
        
        [EditorMarkUpAttribute(displayName: "firing patterns")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_firing_pattern_block> firing_patterns;
        
        [EditorMarkUpAttribute(displayName: "weapon melee damage")]
        [TagReferenceAttribute("jpt!")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference weapon_melee_damage;
        
        [FlagsAttribute()]
        public enum b_weapons_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "bursting inhibits movement")]
            bursting_inhibits_movement = 0x1,
            
            [EditorMarkUpAttribute(displayName: "must crouch to shoot")]
            must_crouch_to_shoot = 0x2,
            
            [EditorMarkUpAttribute(displayName: "use extended safe-to-save range")]
            use_extended_safe_to_save_range = 0x4,
        }
        
        public enum e_special_fire_mode : short
        {
            
            [EditorMarkUpAttribute(displayName: "none")]
            none = 0x0,
            
            [EditorMarkUpAttribute(displayName: "overcharge")]
            overcharge = 0x1,
            
            [EditorMarkUpAttribute(displayName: "secondary trigger")]
            secondary_trigger = 0x2,
        }
        
        public enum e_special_fire_situation : short
        {
            
            [EditorMarkUpAttribute(displayName: "never")]
            never = 0x0,
            
            [EditorMarkUpAttribute(displayName: "enemy visible")]
            enemy_visible = 0x1,
            
            [EditorMarkUpAttribute(displayName: "enemy out of sight")]
            enemy_out_of_sight = 0x2,
            
            [EditorMarkUpAttribute(displayName: "strafing")]
            strafing = 0x3,
        }
    }
    #endregion
    
    #region character_firing_pattern_properties_block
    [TagBlockDefinitionAttribute(cacheFileSize: 16, tagFileSize: 16, alignment: 4, maxBlockCount: 100)]
    public class character_firing_pattern_properties_block
    {
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.BlockName, displayName: "weapon")]
        [TagReferenceAttribute("weap")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference weapon;
        
        [PaddingAttribute(PaddingType.Useless, 24)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "firing patterns")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public tag_block<character_firing_pattern_block> firing_patterns;
    }
    #endregion
    
    #region character_grenades_block
    [TagBlockDefinitionAttribute(cacheFileSize: 60, tagFileSize: 60, alignment: 4, maxBlockCount: 10)]
    public class character_grenades_block
    {
        
        [EditorMarkUpAttribute(displayName: "grenades flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_grenades_flags grenades_flags;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.BlockName, displayName: "grenade type", tooltipText: "type of grenades that we throw^")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_grenade_type grenade_type;
        
        [EditorMarkUpAttribute(displayName: "trajectory type", tooltipText: "how we throw our grenades")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_trajectory_type trajectory_type;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "minimum enemy count", tooltipText: "how many enemies must be within the radius of the grenade before we will consider" +
    " throwing there")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short minimum_enemy_count;
        
        [EditorMarkUpAttribute(displayName: "enemy radius", unitsSpecifier: "world units", tooltipText: "we consider enemies within this radius when determining where to throw")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float enemy_radius;
        
        [EditorMarkUpAttribute(displayName: "grenade ideal velocity", unitsSpecifier: "world units per second", tooltipText: "how fast we LIKE to throw our grenades")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float grenade_ideal_velocity;
        
        [EditorMarkUpAttribute(displayName: "grenade velocity", unitsSpecifier: "world units per second", tooltipText: "the fastest we can possibly throw our grenades")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float grenade_velocity;
        
        [EditorMarkUpAttribute(displayName: "grenade ranges", unitsSpecifier: "world units", tooltipText: "ranges within which we will consider throwing a grenade")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds grenade_ranges;
        
        [EditorMarkUpAttribute(displayName: "collateral damage radius", unitsSpecifier: "world units", tooltipText: "we won\'t throw if there are friendlies around our target within this range")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float collateral_damage_radius;
        
        [EditorMarkUpAttribute(displayName: "grenade chance", unitsSpecifier: "[0,1]", tooltipText: "how likely we are to throw a grenade in one second")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float grenade_chance;
        
        [EditorMarkUpAttribute(displayName: "grenade throw delay", unitsSpecifier: "seconds", tooltipText: "How long we have to wait after throwing a grenade before we can throw another one" +
    "")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float grenade_throw_delay;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EditorMarkUpAttribute(displayName: "grenade uncover chance", unitsSpecifier: "[0,1]", tooltipText: "how likely we are to throw a grenade to flush out a target in one second")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float grenade_uncover_chance;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EditorMarkUpAttribute(displayName: "anti-vehicle grenade chance", unitsSpecifier: "[0,1]", tooltipText: "how likely we are to throw a grenade against a vehicle")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float anti_vehicle_grenade_chance;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "Grenade drop when killed");
        
        [EditorMarkUpAttribute(displayName: "grenade count", tooltipText: "number of grenades that we start with")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public ShortBounds grenade_count;
        
        [EditorMarkUpAttribute(displayName: "dont drop grenades chance", unitsSpecifier: "[0,1]", tooltipText: "how likely we are not to drop any grenades when we die, even if we still have som" +
    "e")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float dont_drop_grenades_chance;
        
        [FlagsAttribute()]
        public enum b_grenades_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "Flag1")]
            flag1 = 0x1,
        }
        
        public enum e_grenade_type : short
        {
            
            [EditorMarkUpAttribute(displayName: "human fragmentation")]
            human_fragmentation = 0x0,
            
            [EditorMarkUpAttribute(displayName: "covenant plasma")]
            covenant_plasma = 0x1,
        }
        
        public enum e_trajectory_type : short
        {
            
            [EditorMarkUpAttribute(displayName: "toss")]
            toss = 0x0,
            
            [EditorMarkUpAttribute(displayName: "lob")]
            lob = 0x1,
            
            [EditorMarkUpAttribute(displayName: "bounce")]
            bounce = 0x2,
        }
    }
    #endregion
    
    #region character_vehicle_block
    [TagBlockDefinitionAttribute(cacheFileSize: 180, tagFileSize: 180, alignment: 4, maxBlockCount: 100)]
    public class character_vehicle_block
    {
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.BlockName, displayName: "unit")]
        [TagReferenceAttribute("unit")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference unit;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.BlockName, displayName: "style")]
        [TagReferenceAttribute("styl")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference style;
        
        [PaddingAttribute(PaddingType.Useless, 32)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "vehicle flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_vehicle_flags vehicle_flags;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "Pathfinding");
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai pathfinding radius", unitsSpecifier: "world units", tooltipText: "(Ground vehicles)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_pathfinding_radius;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai destination radius", unitsSpecifier: "world units", tooltipText: "(All vehicles) Distance within which goal is considered reached")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_destination_radius;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai deceleration distanceworld units", tooltipText: "(All vehicles)Distance from goal at which AI starts to decelerate")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_deceleration_distanceworld_units;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField1 = new Explanation(name: "Turning");
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai turning radius", tooltipText: "(Warthog, Pelican, Ghost) Idealized average turning radius (should reflect actual" +
    " vehicle physics)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_turning_radius;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai inner turning radius (< tr", tooltipText: "(Warthog-type) Idealized minimum turning radius (should reflect actual vehicle ph" +
    "ysics)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_inner_turning_radius____tr;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai ideal turning radius (> tr", tooltipText: "(Warthogs, ghosts) Ideal turning radius for rounding turns (barring obstacles, et" +
    "c.)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_ideal_turning_radius____tr;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField2 = new Explanation(name: "Steering");
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai banshee steering maximum", tooltipText: "(Banshee)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_banshee_steering_maximum;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai max steering angle", unitsSpecifier: "degrees", tooltipText: "(Warthog, ghosts, wraiths)Maximum steering angle from forward (ultimately control" +
    "s turning speed)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_max_steering_angle;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai max steering delta", unitsSpecifier: " degrees", tooltipText: "(pelicans, dropships, ghosts, wraiths)Maximum delta in steering angle from one ti" +
    "ck to the next (ultimately controls turn acceleration)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_max_steering_delta;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai oversteering scale", tooltipText: "(Warthog, ghosts, wraiths)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_oversteering_scale;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai oversteering bounds", tooltipText: "(Banshee) Angle to goal at which AI will oversteer")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public AngleBounds ai_oversteering_bounds;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai sideslip distance", tooltipText: "(Ghosts, Dropships) Distance within which Ai will strafe to target (as opposed to" +
    " turning)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_sideslip_distance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai avoidance distance", unitsSpecifier: "world units", tooltipText: "(Banshee-style) Look-ahead distance for obstacle avoidance")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_avoidance_distance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai min urgency", unitsSpecifier: "[0-1]", tooltipText: "(Banshees)The minimum urgency with which a turn can be made (urgency = percent of" +
    " maximum steering delta)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_min_urgency;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField3 = new Explanation(name: "Throttle");
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai throttle maximum", unitsSpecifier: "(0 - 1)", tooltipText: "(All vehicles)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_throttle_maximum;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai goal min throttle scale", tooltipText: "(Warthogs, Dropships, ghosts)scale on throttle when within \'ai deceleration dista" +
    "nce\' of goal (0...1)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_goal_min_throttle_scale;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai turn min throttle scale", tooltipText: "(Warthogs, ghosts) Scale on throttle due to nearness to a turn (0...1)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_turn_min_throttle_scale;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai direction min throttle scale", tooltipText: "(Warthogs, ghosts) Scale on throttle due to facing away from intended direction (" +
    "0...1)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_direction_min_throttle_scale;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai acceleration scale", unitsSpecifier: "(0-1)", tooltipText: "(warthogs, ghosts) The maximum allowable change in throttle between ticks")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_acceleration_scale;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai throttle blend", unitsSpecifier: "(0-1)", tooltipText: "(dropships, sentinels) The degree of throttle blending between one tick and the n" +
    "ext (0 = no blending)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_throttle_blend;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "theoretical max speed", unitsSpecifier: "wu/s", tooltipText: "(dropships, warthogs, ghosts) About how fast I can go.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float theoretical_max_speed;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "error scale", tooltipText: "(dropships, warthogs) scale on the difference between desired and actual speed, a" +
    "pplied to throttle")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float error_scale;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding5;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField4 = new Explanation(name: "Combat");
        
        [EditorMarkUpAttribute(displayName: "ai allowable aim deviation angle")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_allowable_aim_deviation_angle;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding6;
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField5 = new Explanation(name: "Behavior");
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai charge tight angle distance", tooltipText: "(All vehicles) The distance at which the tight angle criterion is used for decidi" +
    "ng to vehicle charge")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_charge_tight_angle_distance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai charge tight angle", unitsSpecifier: "[0-1]", tooltipText: "(All vehicles) Angle cosine within which the target must be when target is closer" +
    " than tight angle distance in order to charge")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_charge_tight_angle;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai charge repeat timeout", tooltipText: "(All vehicles) Time delay between vehicle charges")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_charge_repeat_timeout;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai charge look-ahead time", tooltipText: "(All vehicles) In deciding when to abort vehicle charge, look ahead these many se" +
    "conds to predict time of contact")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_charge_look_ahead_time;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai charge consider distance", tooltipText: "Consider charging the target when it is within this range (0 = infinite distance)" +
    "")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_charge_consider_distance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai charge abort distance", tooltipText: "Abort the charge when the target get more than this far away (0 = never abort)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_charge_abort_distance;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding7;
        
        [EditorMarkUpAttribute(displayName: "vehicle ram timeout", tooltipText: "The ram behavior stops after a maximum of the given number of seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float vehicle_ram_timeout;
        
        [EditorMarkUpAttribute(displayName: "ram paralysis time", tooltipText: "The ram behavior freezes the vehicle for a given number of seconds after performi" +
    "ng the ram")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ram_paralysis_time;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding8;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai cover damage threshold", tooltipText: "(All vehicles) Trigger a cover when recent damage is above given threshold (damag" +
    "e_vehicle_cover impulse)")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_cover_damage_threshold;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai cover min distance", tooltipText: "(All vehicles) When executing vehicle-cover, minimum distance from the target to " +
    "flee to")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_cover_min_distance;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai cover time", tooltipText: "(All vehicles) How long to stay away from the target")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_cover_time;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.Unknown1, displayName: "ai cover min boost distance", tooltipText: "(All vehicles) Boosting allowed when distance to cover destination is greater the" +
    "n this.")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float ai_cover_min_boost_distance;
        
        [EditorMarkUpAttribute(displayName: "turtling recent damage threshold", unitsSpecifier: "%", tooltipText: "If vehicle turtling behavior is enabled, turtling is initiated if \'recent damage\'" +
    " surpasses the given threshold")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float turtling_recent_damage_threshold;
        
        [EditorMarkUpAttribute(displayName: "turtling min time", unitsSpecifier: "seconds", tooltipText: "If the vehicle turtling behavior is enabled, turtling occurs for at least the giv" +
    "en time")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float turtling_min_time;
        
        [EditorMarkUpAttribute(displayName: "turtling timeout", unitsSpecifier: "seconds", tooltipText: "The turtled state times out after the given number of seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float turtling_timeout;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding9;
        
        [EditorMarkUpAttribute(displayName: "obstacle ignore size")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_obstacle_ignore_size obstacle_ignore_size;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding10;
        
        [FlagsAttribute()]
        public enum b_vehicle_flags : uint
        {
            
            [EditorMarkUpAttribute(displayName: "passengers adopt original squad")]
            passengers_adopt_original_squad = 0x1,
        }
        
        public enum e_obstacle_ignore_size : short
        {
            
            [EditorMarkUpAttribute(displayName: "none")]
            none = 0x0,
            
            [EditorMarkUpAttribute(displayName: "tiny")]
            tiny = 0x1,
            
            [EditorMarkUpAttribute(displayName: "small")]
            small = 0x2,
            
            [EditorMarkUpAttribute(displayName: "medium")]
            medium = 0x3,
            
            [EditorMarkUpAttribute(displayName: "large")]
            large = 0x4,
            
            [EditorMarkUpAttribute(displayName: "huge")]
            huge = 0x5,
            
            [EditorMarkUpAttribute(displayName: "immobile")]
            immobile = 0x6,
        }
    }
    #endregion
}
