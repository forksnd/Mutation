//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mutation.Halo.TagGroups.Tags
{
    using System;
    using System.IO;
    using Mutation.Halo;
    using Mutation.Halo.TagGroups;
    using Mutation.Halo.TagGroups.Attributes;
    using Mutation.Halo.TagGroups.FieldTypes;
    
    
    [TagGroupDefinitionAttribute(cacheFileSize: 172, tagFileSize: 188, version: 1, groupTag: "deca", parentGroupTag: "", name: "decal", minimumVersion: EngineVersion.Halo2Xbox, maximumVersion: EngineVersion.Halo2Vista)]
    public class decal_block
    {
        
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public Explanation _explanationField0 = new Explanation(name: "DECAL", explanation: "There are several \"layers\" which decals can be placed into, these layers are draw" +
    "n in a specific order relative to the shader layers and each layer has its own s" +
    "pecific blending mode. In general, the decal bitmap\'s alpha channel will be used" +
    " as an opacity mask if it exists.\n\n* LIT ALPHA-BLEND PRELIGHT: Decals in this la" +
    "yer are lit by the lightmap but are \"faded out\" by dynamic lights. What this mea" +
    "ns is that dynamic lights hitting them will cause them to disappear, sort of. Th" +
    "is layer is rendered immediately before lightmap shadows (and before dynamic lig" +
    "hts).\n\n* LIT ALPHA-BLEND: Decals in this layer are lit by the lightmap but are N" +
    "OT lit by dynamic lights. What this means is that if the decal exists in an area" +
    " that has dark lightmapping but bright dynamic lighting, the decal will appear d" +
    "ark. This layer is rendered immediately after dynamic lights, and all subsequent" +
    " decal layers are rendered after this one in order.\n\n* DOUBLE MULTIPLY: Decals i" +
    "n this layer will double-multiply the color in the framebuffer. Gray pixels in t" +
    "he decal bitmap will be transparent (black darkens, white brightens). The decal " +
    "color in the tag does NOT do anything!!\n\n* MULTIPLY: Decals in this layer will m" +
    "ultiply the color in the framebuffer. White pixels in the decal bitmap will be t" +
    "ransparent. The decal color (in the decal tag) does NOT do anything!!\n\n* MAX: De" +
    "cals in this layer will perform a component-wise max operation on the framebuffe" +
    "r, replacing color values with whichever is higher. Black pixels in the decal bi" +
    "tmap will be transparent.\n\n* ADD: Decals in this layer will perform an addition " +
    "operation on the framebuffer, replacing color values with the sum of the two. Bl" +
    "ack pixels in the decal bitmap will be transparent.\n\n* ERROR: Decals in this lay" +
    "er will render bright red and show through geometry!\n\nA compound decal is a chai" +
    "n of decals which are instantiated simultaneously. Compound decals are created b" +
    "y referencing another decal tag in the \'next_decal_in_chain\' field below. Do not" +
    " attempt to create a circularly linked decal chain, i.e. A->B->C->A! This will c" +
    "ause problems and probably hang the game. Also, do not reference a decal from an" +
    " effect if it is not the head of the chain; for example an effect should not ins" +
    "tantiate decal B if the chain was A->B->C. Compound decals can have seperate bit" +
    "maps, etc., and can be drawn in seperate layers. In addition, we used to have th" +
    "e ability for each decal in the chain can either inherit its parent\'s radius, ro" +
    "tation, color, etc. - or it can randomly choose its own. This behavior was contr" +
    "olled by the \'geometry_inherited_by_next_decal_in_chain\' flag, below but it\'s cu" +
    "rrently broken.");
        
        [EditorMarkUpAttribute(displayName: "flags")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public b_flags flags;
        
        [EditorMarkUpAttribute(displayName: "type", tooltipText: "controls how the decal wraps onto surface geometry")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_type type;
        
        [EditorMarkUpAttribute(displayName: "layer")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public e_layer layer;
        
        [EditorMarkUpAttribute(displayName: "max overlapping count")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public short max_overlapping_count;
        
        [EditorMarkUpAttribute(displayName: "next decal in chain")]
        [TagReferenceAttribute("deca")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference next_decal_in_chain;
        
        [EditorMarkUpAttribute(displayName: "radius", unitsSpecifier: "world units", tooltipText: "0 defaults to 0.125")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds radius;
        
        [EditorMarkUpAttribute(displayName: "radius overlap rejection", unitsSpecifier: "muliplier")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float radius_overlap_rejection;
        
        [PaddingAttribute(PaddingType.Useless, 16)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding0;
        
        [EditorMarkUpAttribute(displayName: "color lower bounds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealColorRgb color_lower_bounds;
        
        [EditorMarkUpAttribute(displayName: "color upper bounds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealColorRgb color_upper_bounds;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding1;
        
        [PaddingAttribute(PaddingType.Useless, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding2;
        
        [PaddingAttribute(PaddingType.Useless, 28)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding3;
        
        [EditorMarkUpAttribute(displayName: "lifetime", unitsSpecifier: "seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds lifetime;
        
        [EditorMarkUpAttribute(displayName: "decay time", unitsSpecifier: "seconds")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public RealBounds decay_time;
        
        [PaddingAttribute(PaddingType.Useless, 12)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding4;
        
        [PaddingAttribute(PaddingType.Padding, 40)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding5;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding6;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding7;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding8;
        
        [PaddingAttribute(PaddingType.Padding, 2)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding9;
        
        [PaddingAttribute(PaddingType.Padding, 20)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding10;
        
        [EditorMarkUpAttribute(displayName: "bitmap")]
        [TagReferenceAttribute("bitm")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public TagReference bitmap;
        
        [PaddingAttribute(PaddingType.Padding, 20)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding11;
        
        [EditorMarkUpAttribute(flags: EditorMarkUpFlags.ReadOnly, displayName: "maximum sprite extent", unitsSpecifier: "pixels*")]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public float maximum_sprite_extent;
        
        [PaddingAttribute(PaddingType.Padding, 4)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding12;
        
        [PaddingAttribute(PaddingType.Useless, 8)]
        [EngineVersionAttribute(min: EngineVersion.Halo2Xbox, max: EngineVersion.Halo2Vista)]
        public byte[] _padding13;
        
        [FlagsAttribute()]
        public enum b_flags : short
        {
            
            [EditorMarkUpAttribute(displayName: "geometry inherited by next decal in chain")]
            geometry_inherited_by_next_decal_in_chain = 0x1,
            
            [EditorMarkUpAttribute(displayName: "interpolate color in hsv")]
            interpolate_color_in_hsv = 0x2,
            
            [EditorMarkUpAttribute(displayName: "...more colors")]
            ___more_colors = 0x4,
            
            [EditorMarkUpAttribute(displayName: "no random rotation")]
            no_random_rotation = 0x8,
            
            [EditorMarkUpAttribute(displayName: "UNUSED")]
            unused = 0x10,
            
            [EditorMarkUpAttribute(displayName: "SAPIEN- snap to axis")]
            sapien__snap_to_axis = 0x20,
            
            [EditorMarkUpAttribute(displayName: "SAPIEN- incremental counter")]
            sapien__incremental_counter = 0x40,
            
            [EditorMarkUpAttribute(displayName: "UNUSED")]
            unused1 = 0x80,
            
            [EditorMarkUpAttribute(displayName: "preserve aspect")]
            preserve_aspect = 0x100,
            
            [EditorMarkUpAttribute(displayName: "UNUSED")]
            unused2 = 0x200,
        }
        
        public enum e_type : short
        {
            
            [EditorMarkUpAttribute(displayName: "scratch")]
            scratch = 0x0,
            
            [EditorMarkUpAttribute(displayName: "splatter")]
            splatter = 0x1,
            
            [EditorMarkUpAttribute(displayName: "burn")]
            burn = 0x2,
            
            [EditorMarkUpAttribute(displayName: "painted sign")]
            painted_sign = 0x3,
        }
        
        public enum e_layer : short
        {
            
            [EditorMarkUpAttribute(displayName: "lit alpha-blend prelight")]
            lit_alpha_blend_prelight = 0x0,
            
            [EditorMarkUpAttribute(displayName: "lit alpha-blend")]
            lit_alpha_blend = 0x1,
            
            [EditorMarkUpAttribute(displayName: "double multiply")]
            double_multiply = 0x2,
            
            [EditorMarkUpAttribute(displayName: "multiply")]
            multiply = 0x3,
            
            [EditorMarkUpAttribute(displayName: "max")]
            max = 0x4,
            
            [EditorMarkUpAttribute(displayName: "add")]
            add = 0x5,
            
            [EditorMarkUpAttribute(displayName: "error")]
            error = 0x6,
        }
    }
}
